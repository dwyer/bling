package bytes

import "sys"
import "utils"

#pragma once

#include "utils/utils.h"

fun hasSuffix(b *const char, suffix *const char) bool

fun indexByte(b *const char, c char) int

fun join(a []*const char, size int, sep *const char) *char

fun lastIndexByte(b *const char, c char) int

typedef Buffer utils.Slice

fun Buffer_bytes(b *Buffer) *char

fun Buffer_len(b *Buffer) int

fun Buffer_string(b *Buffer) *char

fun Buffer_write(b *Buffer, p *const char, size int, error **utils.Error) int

fun Buffer_writeByte(b *Buffer, p char, error **utils.Error)

#include "bytes/bytes.h"

#include "sys/sys.h"

fun hasSuffix(b *const char, suffix *const char) bool {
    for var i int = 0; b[i]; i++ {
        if streq(&b[i], suffix) {
            return true
        }
    }
    return false
}

fun indexByte(b *const char, c char) int {
    for var i int = 0; b[i]; i++ {
        if b[i] == c {
            return i
        }
    }
    return -1
}

fun join(a []*const char, size int, sep *const char) *char {
    switch size {
    case 0: return strdup("")
    case 1: return strdup(a[0])
    }
    var b Buffer = {}
    Buffer_write(&b, a[0], strlen(a[0]), NULL)
    for var i int = 1; i < size; i++ {
        Buffer_write(&b, sep, strlen(sep), NULL)
        Buffer_write(&b, a[i], strlen(a[i]), NULL)
    }
    return Buffer_string(&b)
}

fun lastIndexByte(b *const char, c char) int {
    for var i int = strlen(b) - 1; i >= 0; i-- {
        if c == b[i] {
            return i
        }
    }
    return -1
}

fun Buffer_init(b *Buffer) {
    if b.size == 0 {
        b.size = sizeof(char)
        b.cap = 1024
    }
}

fun Buffer_len(b *Buffer) int {
    return utils.Slice_len(b)
}

fun Buffer_bytes(b *Buffer) *char {
    Buffer_init(b)
    return b.array
}

fun Buffer_string(b *Buffer) *char {
    Buffer_init(b)
    var s *char = malloc(Buffer_len(b) + 1)
    sys.memcpy(s, b.array, Buffer_len(b))
    s[Buffer_len(b)] = '\0'
    return s
}

fun Buffer_write(b *Buffer, p *const char, size int, error **utils.Error) int {
    Buffer_init(b)
    if size < 0 {
        size = strlen(p)
    }
    for var i int = 0; i < size; i++ {
        utils.Slice_append(b, &p[i])
    }
    return size
}

fun Buffer_writeByte(b *Buffer, p char, error **utils.Error) {
    Buffer_init(b)
    utils.Slice_append(b, &p)
}
