package bytes

import "runtime"

typ Buffer []char

fun hasSuffix(b charstr, suffix charstr) bool {
    for var i = 0; b[i]; i++ {
        if runtime.streq(&b[i], suffix) {
            return true
        }
    }
    return false
}

fun indexByte(b charstr, c char) int {
    for var i = 0; b[i]; i++ {
        if b[i] == c {
            return i
        }
    }
    return -1
}

fun join(a [?]charstr, size int, sep charstr) charptr {
    switch size {
    case 0:
        return runtime.strdup("")
    case 1:
        return runtime.strdup(a[0])
    }
    var b Buffer = []char{}
    b.writeChars(a[0], runtime.strlen(a[0]), nil)
    for var i = 1; i < size; i++ {
        b.writeChars(sep, runtime.strlen(sep), nil)
        b.writeChars(a[i], runtime.strlen(a[i]), nil)
    }
    return b.toString()
}

fun lastIndexByte(b charstr, c char) int {
    for var i = runtime.strlen(b) - 1; i >= 0; i-- {
        if c == b[i] {
            return i
        }
    }
    return -1
}

fun (b *Buffer) init() {
    if len(*b) == 0 {
        *b = []char{}
    }
}

fun (b *Buffer) len() int {
    return len(*b)
}

fun (b *Buffer) bytes() charptr {
    b.init()
    return runtime.Array_get(typ *runtime.Slice(b), 1, 0, nil)
}

fun (b *Buffer) toString() charptr {
    b.init()
    var s charptr = runtime.malloc(b.len() + 1)
    runtime.memcpy(s, runtime.Array_get(typ *runtime.Slice(b), 1, 0, nil), b.len())
    s[b.len()] = '\0'
    return s
}

fun (b *Buffer) write(p []char, error **runtime.Error) int {
    b.init()
    for var i = 0; i < len(p); i++ {
        append(*b, p[i])
    }
    return len(p)
}

fun (b *Buffer) writeByte(p char, error **runtime.Error) {
    b.init()
    append(*b, p)
}

fun (b *Buffer) writeChars(p charstr, size int, error **runtime.Error) int {
    b.init()
    if size < 0 {
        size = runtime.strlen(p)
    }
    for var i = 0; i < size; i++ {
        append(*b, p[i])
    }
    return size
}

fun (b *Buffer) writeString(p charstr, error **runtime.Error) int {
    return b.writeChars(p, -1, error)
}
