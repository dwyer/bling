package paths

import "bytes"
import "runtime"

fun base(path *const char) *char {
    if path == nil || path[0] == '\0' {
        return runtime.strdup(".")
    }
    var i int = bytes.lastIndexByte(path, '/')
    if i > 0 {
        path = &path[i + 1]
    }
    return runtime.strdup(path)
}

fun clean(path *const char) *char {
    if runtime.streq(path, "") {
        return runtime.strdup(".")
    }
    var r = 0
    var n = runtime.strlen(path)
    var out = bytes.Buffer{}
    var rooted = path[0] == '/'
    if rooted {
        bytes.Buffer_writeByte(&out, '/', nil)
        r++
    }
    for ; r < n; {
        if path[r] == '/' {
            r++
        } else if path[r] == '.' && (r+1 == n || path[r+1] == '/') {
            r++
        } else if path[r] == '.' && path[r+1] == '.' && (r+2 == n || path[r+2] == '/') {
            r += 2
            panic("not implemented")
        } else {
            if (rooted && bytes.Buffer_len(&out) != 1) || (!rooted && bytes.Buffer_len(&out) != 0) {
                bytes.Buffer_writeByte(&out, '/', nil)
            }
            for ; r < n && path[r] != '/'; r++ {
                bytes.Buffer_writeByte(&out, path[r], nil)
            }
        }
    }
    if bytes.Buffer_len(&out) == 0 {
        return runtime.strdup(".")
    }
    return bytes.Buffer_string(&out)
}

fun dir(path *const char) *char {
    if path == nil || path[0] == '\0' {
        return runtime.strdup(".")
    }
    var i = bytes.lastIndexByte(path, '/')
    if i > 0 {
        var p = runtime.strdup(path)
        p[i] = '\0'
        return p
    }
    return runtime.strdup(".")
}

fun ext(path *const char) *const char {
    var n int = runtime.strlen(path) - 1
    while n > 0 && path[n] != '.' {
        n--
    }
    return &path[n]
}

fun isAbs(path *const char) bool {
    return path != nil && path[0] == '/'
}

fun join(elems **const char, n int) *char {
    return bytes.join(elems, n, "/")
}

fun join2(a *const char, b *const char) *char {
    var elems []*const char = {
        a,
        b,
    }
    return join(elems, 2)
}

fun split(path *const char) **char {
    var names **char = runtime.malloc(sizeof(*char) * 2)
    names[0] = dir(path)
    names[1] = base(path)
    return names
}

fun match(pattern *const char, path *const char) bool {
    if *pattern == '\0' && *path == '\0' {
        return true
    }
    if *pattern == '\0' || *path == '\0' {
        return false
    }
    if *pattern == '*' {
        return match(pattern + 1, path) || match(pattern, path + 1)
    }
    if *pattern == *path {
        return match(pattern + 1, path + 1)
    }
    return false
}
