package paths

import "bytes"
import "runtime"

fun base(path string) string {
    if path == nil || path[0] == '\0' {
        return runtime.strdup(".")
    }
    if var i = bytes.lastIndexByte(path, '/'); i > 0 {
        path = &path[i + 1]
    }
    return runtime.strdup(path)
}

fun clean(path string) string {
    if runtime.streq(path, "") {
        return runtime.strdup(".")
    }
    var r = 0
    var n = len(path)
    var out = bytes.Buffer{}
    var rooted = path[0] == '/'
    if rooted {
        out.writeByte('/', nil)
        r++
    }
    for ; r < n; {
        if path[r] == '/' {
            r++
        } else if path[r] == '.' && (r+1 == n || path[r+1] == '/') {
            r++
        } else if path[r] == '.' && path[r+1] == '.' && (r+2 == n || path[r+2] == '/') {
            r += 2
            panic("not implemented")
        } else {
            if (rooted && out.len() != 1) || (!rooted && out.len() != 0) {
                out.writeByte('/', nil)
            }
            for ; r < n && path[r] != '/'; r++ {
                out.writeByte(path[r], nil)
            }
        }
    }
    if out.len() == 0 {
        return runtime.strdup(".")
    }
    return out.toString()
}

fun dir(path string) string {
    if path == nil || path[0] == '\0' {
        return runtime.strdup(".")
    }
    if var i = bytes.lastIndexByte(path, '/'); i > 0 {
        var p = runtime.stringToBytes(path)
        p[i] = '\0'
        return runtime.bytesToString(p)
    }
    return runtime.strdup(".")
}

fun ext(path string) string {
    var n = len(path) - 1
    while n > 0 && path[n] != '.' {
        n--
    }
    return &path[n]
}

fun isAbs(path string) bool {
    return path != nil && path[0] == '/'
}

fun join(elems *string, n int) string {
    return bytes.join(elems, n, "/")
}

fun join2(a string, b string) string {
    var elems = [?]string{
        a,
        b,
    }
    return join(elems, 2)
}

fun split(path string) *string {
    var names *string = runtime.malloc(sizeof(string) * 2)
    names[0] = dir(path)
    names[1] = base(path)
    return names
}

fun match(pattern string, path string) bool {
    if pattern[0] == '\0' && path[0] == '\0' {
        return true
    }
    if pattern[0] == '\0' || path[0] == '\0' {
        return false
    }
    if pattern[0] == '*' {
        return match(&pattern[1], path) || match(pattern, &path[1])
    }
    if pattern[0] == path[0] {
        return match(&pattern[1], &path[1])
    }
    return false
}
