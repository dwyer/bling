package scanner

import "C"
import "bling/token"
import "runtime"

typ Scanner struct {
    file *token.File
    src []char
    rdOffset int
    offset int
    ch int
    insertSemi bool
    dontInsertSemis bool
}

fun (s *Scanner) next() {
    if s.rdOffset < len(s.src) {
        s.offset = s.rdOffset
        if s.ch == '\n' {
            s.file.addLine(s.offset)
        }
        s.ch = s.src[s.rdOffset]
        s.rdOffset++
    } else {
        s.ch = 0
    }
}

fun (s *Scanner) skipWhitespace() {
    while s.ch == ' ' || (s.ch == '\n' && !s.insertSemi) || s.ch == '\t' {
        s.next()
    }
}

fun (s *Scanner) skipLine() {
    while s.ch >= 0 && s.ch != '\n' {
        s.next()
    }
}

fun isLetter(ch int) bool {
    return ('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') || ch == '_'
}

fun isDigit(ch int) bool {
    return '0' <= ch && ch <= '9'
}

fun (s *Scanner) switch4(tok0 token.Token, tok1 token.Token, ch2 int, tok2 token.Token, tok3 token.Token) token.Token {
    if s.ch == '=' {
        s.next()
        return tok1
    }
    if ch2 && tok2 && s.ch == ch2 {
        s.next()
        if tok3 && s.ch == '=' {
            s.next()
            return tok3
        }
        return tok2
    }
    return tok0
}

fun (s *Scanner) switch3(tok0 token.Token, tok1 token.Token, ch2 int, tok2 token.Token) token.Token {
    return s.switch4(tok0, tok1, ch2, tok2, token.ILLEGAL)
}

fun (s *Scanner) switch2(tok0 token.Token, tok1 token.Token) token.Token {
    return s.switch4(tok0, tok1, '\0', token.ILLEGAL, token.ILLEGAL)
}

fun (s *Scanner) makeStringSlice(start int, end int) string {
    return runtime.strndup(&s.src[start], end - start)
}

fun (s *Scanner) scanIdent() string {
    var offs = s.offset
    while isLetter(s.ch) || isDigit(s.ch) || (s.dontInsertSemis && s.ch == '$') {
        s.next()
    }
    return s.makeStringSlice(offs, s.offset)
}

fun (s *Scanner) scanPragma() string {
    var offs = s.offset
    while s.ch > 0 && s.ch != '\n' {
        s.next()
    }
    return s.makeStringSlice(offs, s.offset)
}

typ NumKind enum {
    NumKind_DECINT
    NumKind_HEXINT
    NumKind_FLOAT
}

fun isNumeric(ch int, kind NumKind) bool {
    switch kind {
    case NumKind_HEXINT:
        return ('0' <= ch && ch <= '9') || ('a' <= ch && ch <= 'f') || ('A' <= ch && ch <= 'F')
    case NumKind_DECINT, NumKind_FLOAT:
        return '0' <= ch && ch <= '9'
    }
}

fun (s *Scanner) scanNumber(tokp *token.Token) string {
    var offs = s.offset
    var kind = NumKind_DECINT
    if s.ch == '0' {
        s.next()
        if s.ch == 'x' {
            kind = NumKind_HEXINT
            s.next()
        }
    }
    for {
        if !(isNumeric(s.ch, kind) || s.ch == '.') {
            break
        }
        if s.ch == '.' {
            if kind == NumKind_DECINT {
                kind = NumKind_FLOAT
            } else {
                break
            }
        }
        s.next()
    }
    switch kind {
    case NumKind_DECINT, NumKind_HEXINT:
        *tokp = token.INT
        break
    case NumKind_FLOAT:
        *tokp = token.FLOAT
        break
    }
    return s.makeStringSlice(offs, s.offset)
}

fun (s *Scanner) scanRune() string {
    var offs = s.offset
    var n = 0
    var escape = false
    for {
        if n > 0 && s.ch == '\'' && !escape {
            break
        }
        escape = s.ch == '\\' && !escape
        s.next()
        n++
    }
    s.next()
    return s.makeStringSlice(offs, s.offset)
}

fun (s *Scanner) scanString() string {
    var offs = s.offset
    var n = 0
    var escape = false
    for {
        if n > 0 && s.ch == '"' && !escape {
            break
        }
        escape = s.ch == '\\' && !escape
        s.next()
        n++
    }
    s.next()
    return s.makeStringSlice(offs, s.offset)
}

fun (s *Scanner) error(offs int, msg string) {
    panic(C.sprintf("scanner error: offset %d: %s", offs, msg))
}

fun (s *Scanner) scanComment() {
    var offs = s.offset - 1
    switch s.ch {
    case '/':
        s.skipLine()
        break
    case '*':
        s.next()
        while s.ch >= 0 {
            var ch = s.ch
            s.next()
            if ch == '*' && s.ch == '/' {
                s.next()
                return
            }
        }
        s.error(offs, "comment not terminated")
        break
    default:
        panic("not a comment")
        break
    }
}

fun (s *Scanner) scan(pos *token.Pos, lit *string) token.Token {
    var tok token.Token
scanAgain:
    tok = token.ILLEGAL
    s.skipWhitespace()
    *pos = s.file.pos(s.offset)
    var insertSemi = false
    *lit = nil
    if isLetter(s.ch) {
        *lit = s.scanIdent()
        if len(*lit) > 1 {
            tok = token.lookup(*lit)
            if tok != token.IDENT {
                delete(*lit)
                *lit = nil
            }
            switch tok {
            case token.IDENT, token.BREAK, token.CONTINUE, token.FALLTHROUGH, token.RETURN:
                insertSemi = true
                break
            default:
                break
            }
        } else {
            insertSemi = true
            tok = token.IDENT
        }
    } else if isDigit(s.ch) {
        insertSemi = true
        *lit = s.scanNumber(&tok)
    } else if s.ch == '\'' {
        insertSemi = true
        *lit = s.scanRune()
        tok = token.CHAR
    } else if s.ch == '"' {
        insertSemi = true
        *lit = s.scanString()
        tok = token.STRING
    } else {
        var ch = s.ch
        s.next()
        switch ch {
        case '\0':
            insertSemi = true
            tok = token.EOF
            break
        case '\n':
            assert(s.insertSemi)
            s.insertSemi = false
            return token.SEMICOLON
        case '#':
            if s.dontInsertSemis {
                tok = token.HASH
                *lit = s.scanPragma()
            }
            break
        case '(':
            tok = token.LPAREN
            break
        case ')':
            insertSemi = true
            tok = token.RPAREN
            break
        case ',':
            tok = token.COMMA
            break
        case ':':
            tok = token.COLON
            break
        case ';':
            tok = token.SEMICOLON
            break
        case '?':
            if s.ch == '.' {
                s.next()
                tok = token.QUESTION_PERIOD
            } else {
                tok = token.QUESTION_MARK
            }
            break
        case '[':
            tok = token.LBRACK
            break
        case ']':
            insertSemi = true
            tok = token.RBRACK
            break
        case '{':
            tok = token.LBRACE
            break
        case '}':
            insertSemi = true
            tok = token.RBRACE
            break
        case '~':
            tok = token.BITWISE_NOT
            break
        case '!':
            tok = s.switch2(token.NOT, token.NOT_EQUAL)
            break
        case '$':
            break
        case '%':
            tok = s.switch2(token.MOD, token.MOD_ASSIGN)
            break
        case '&':
            tok = s.switch3(token.AND, token.AND_ASSIGN, '&', token.LAND)
            break
        case '*':
            tok = s.switch2(token.MUL, token.MUL_ASSIGN)
            break
        case '+':
            tok = s.switch3(token.ADD, token.ADD_ASSIGN, '+', token.INC)
            if tok == token.INC {
                insertSemi = true
            }
            break
        case '-':
            if s.ch == '>' && s.dontInsertSemis {
                s.next()
                tok = token.ARROW
            } else {
                tok = s.switch3(token.SUB, token.SUB_ASSIGN, '-', token.DEC)
                if tok == token.DEC {
                    insertSemi = true
                }
            }
            break
        case '.':
            if s.ch == '.' {
                s.next()
                if s.ch == '.' {
                    s.next()
                    tok = token.ELLIPSIS
                }
            } else {
                tok = token.PERIOD
            }
            break
        case '/':
            if s.ch == '/' || s.ch == '*' {
                s.scanComment()
                goto scanAgain
            } else {
                tok = s.switch2(token.DIV, token.DIV_ASSIGN)
            }
            break
        case '<':
            tok = s.switch4(token.LT, token.LT_EQUAL, '<', token.SHL, token.SHL_ASSIGN)
            break
        case '=':
            tok = s.switch2(token.ASSIGN, token.EQUAL)
            break
        case '>':
            tok = s.switch4(token.GT, token.GT_EQUAL, '>', token.SHR, token.SHR_ASSIGN)
            break
        case '|':
            tok = s.switch3(token.OR, token.OR_ASSIGN, '|', token.LOR)
            break
        }
    }
    if !s.dontInsertSemis {
        s.insertSemi = insertSemi
    }
    return tok
}

fun (s *Scanner) init(file *token.File, src []char) {
    file.src = src
    s.file = file
    s.src = src
    s.rdOffset = 0
    s.offset = 0
    s.insertSemi = false
    s.next()
}
