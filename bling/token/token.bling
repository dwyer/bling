package token

import "C"
import "bytes"
import "runtime"

typ Token enum {
    ILLEGAL

    // basic lits
    CHAR
    FLOAT
    IDENT
    INT
    STRING

    // keywords
    _keywordBeg
    ARRAY
    BREAK
    CASE
    CONST
    CONTINUE
    DEFAULT
    ELSE
    ENUM
    FALLTHROUGH
    FOR
    FUNC
    GOTO
    IF
    IMPORT
    MAP
    PACKAGE
    RETURN
    SIZEOF
    STRUCT
    SWITCH
    TYPE
    UNION
    VAR
    WHILE

    // C keywords
    EXTERN
    SIGNED
    STATIC
    TYPEDEF
    UNSIGNED
    _AUTO
    _COMPLEX
    _DO
    _IMAGINARY
    _INLINE
    _LONG
    _REGISTER
    _RESTRICT
    _SHORT
    _TYPEOF
    _VOLATILE
    _keywordEnd

    ARROW
    COLON
    COMMA
    ELLIPSIS
    EOF
    HASH
    LBRACE
    LBRACK
    LPAREN
    PERIOD
    QUESTION_MARK
    RBRACE
    RBRACK
    RPAREN
    SEMICOLON

    ADD
    ADD_ASSIGN
    AND
    AND_ASSIGN
    ASSIGN
    BITWISE_NOT
    DEC
    DIV
    DIV_ASSIGN
    DOLLAR
    EQUAL
    GT
    GT_EQUAL
    INC
    LAND
    LOR
    LT
    LT_EQUAL
    MOD
    MOD_ASSIGN
    MUL
    MUL_ASSIGN
    NOT
    NOT_EQUAL
    OR
    OR_ASSIGN
    SHL
    SHL_ASSIGN
    SHR
    SHR_ASSIGN
    SUB
    SUB_ASSIGN
    XOR
    XOR_ASSIGN
}

typ Pos int

typ Prec enum {
    lowest_prec = 0
    unary_prec = 11
    highest_prec = 12
}

typ File struct {
    set *FileSet
    name string
    base int
    size int
    lines []int
    src []char
}

typ FileSet struct {
    fset *FileSet
    base int
    files []*File
    last *File
}

typ Position struct {
    filename string
    offset int
    line int
    column int
}

var tokens [?]string = {
    ILLEGAL: "ILLEGAL",
    CHAR: "CHAR",
    FLOAT: "FLOAT",
    IDENT: "IDENT",
    INT: "INT",
    STRING: "STRING",
    ARRAY: "array",
    BREAK: "break",
    CASE: "case",
    CONST: "const",
    CONTINUE: "continue",
    DEFAULT: "default",
    ELSE: "else",
    ENUM: "enum",
    EXTERN: "extern",
    FALLTHROUGH: "fallthrough",
    FOR: "for",
    FUNC: "fun",
    GOTO: "goto",
    IF: "if",
    IMPORT: "import",
    MAP: "map",
    PACKAGE: "package",
    RETURN: "return",
    SIGNED: "signed",
    // SIZEOF: "sizeof",
    STATIC: "static",
    STRUCT: "struct",
    SWITCH: "switch",
    TYPEDEF: "typedef",
    TYPE: "typ",
    UNION: "union",
    UNSIGNED: "unsigned",
    VAR: "var",
    WHILE: "while",
    _AUTO: "auto",
    _COMPLEX: "_Complex",
    _DO: "do",
    _IMAGINARY: "_Imaginary",
    _INLINE: "inline",
    _LONG: "long",
    _REGISTER: "register",
    _RESTRICT: "restrict",
    _SHORT: "short",
    _TYPEOF: "typeof",
    _VOLATILE: "volatile",
    ARROW: "->",
    COLON: ":",
    COMMA: ",",
    ELLIPSIS: "...",
    EOF: "EOF",
    HASH: "#",
    LBRACE: "{",
    LBRACK: "[",
    LPAREN: "(",
    PERIOD: ".",
    QUESTION_MARK: "?",
    RBRACE: "}",
    RBRACK: "]",
    RPAREN: ")",
    SEMICOLON: ";",
    ADD: "+",
    ADD_ASSIGN: "+=",
    AND: "&",
    AND_ASSIGN: "&=",
    ASSIGN: "=",
    BITWISE_NOT: "~",
    DEC: "--",
    DIV: "/",
    DIV_ASSIGN: "/=",
    DOLLAR: "$",
    EQUAL: "==",
    GT: ">",
    GT_EQUAL: ">=",
    INC: "++",
    LAND: "&&",
    LOR: "||",
    LT: "<",
    LT_EQUAL: "<=",
    MOD: "%",
    MOD_ASSIGN: "%=",
    MUL: "*",
    MUL_ASSIGN: "*=",
    NOT: "!",
    NOT_EQUAL: "!=",
    OR: "|",
    OR_ASSIGN: "|=",
    SHL: "<<",
    SHL_ASSIGN: "<<=",
    SHR: ">>",
    SHR_ASSIGN: ">>=",
    SUB: "-",
    SUB_ASSIGN: "-=",
    XOR: "^",
    XOR_ASSIGN: "^=",
}

fun (tok Token) string() string {
    return tokens[tok]
}

var keywords = makemap(Token)

fun lookup(ident string) Token {
    if len(keywords) == 0 {
        for var i = _keywordBeg + 1; i < _keywordEnd; i++ {
            if var s = i.string(); s {
                runtime.Map_set(&keywords, s, &i)
            }
        }
    }
    var tok Token
    if runtime.Map_get(&keywords, ident, &tok) {
        return tok
    }
    return IDENT
}

fun (op Token) precedence() int {
    switch op {
    case MUL, DIV, MOD:
        return 10
    case ADD, SUB:
        return 9
    case SHL, SHR:
        return 8
    case GT, GT_EQUAL, LT, LT_EQUAL:
        return 7
    case EQUAL, NOT_EQUAL:
        return 6
    case AND:
        return 5
    case XOR:
        return 4
    case OR:
        return 3
    case LAND:
        return 2
    case LOR:
        return 1
    default:
        return lowest_prec
    }
}

fun (p *Position) string() string {
    return C.sprintf("%s:%d:%d", p.filename, p.line, p.column)
}

fun getInt(a *[]int, i int) int {
    return (*a)[i]
}

fun (f *File) addLine(offset int) {
    var i = len(f.lines)
    if (i == 0 || getInt(&f.lines, i - 1) < offset) && offset < f.size {
        append(f.lines, offset)
    }
}

fun (f *File) pos(offset int) Pos {
    return f.base + offset
}

fun searchInts(a *[]int, x int) int {
    var i = 0
    var j = len(*a)
    while i < j {
        var h = i + (j - i) / 2
        if getInt(a, h) <= x {
            i = h + 1
        } else {
            j = h
        }
    }
    return i - 1
}

fun (f *File) _position(p Pos, adjusted bool) Position {
    var offset = p - f.base
    var i = searchInts(&f.lines, offset)
    var pos = Position{
        filename: f.name,
        offset: offset,
        line: i + 1,
        column: offset - getInt(&f.lines, i) + 1,
    }
    return pos
}

var noPos const Pos = 0

fun (f *File) positionFor(p Pos, adjusted bool) Position {
    var pos = Position{}
    if p != noPos {
        if p < f.base || p > f.base + f.size {
            panic("illegal Pos value")
        }
        pos = f._position(p, adjusted)
    }
    return pos
}

fun (f *File) position(p Pos) Position {
    return f.positionFor(p, true)
}

fun (f *File) lineString(line int) string {
    if line < 1 {
        return nil
    }
    var buf = bytes.Buffer{}
    var i = f.lines[line - 1]
    var ch = f.src[i]
    while ch > 0 && ch != '\n' {
        buf.writeByte(ch, nil)
        i++
        ch = f.src[i]
    }
    return buf.toString()
}

fun newFileSet() *FileSet {
    var fset = FileSet{
        base: 1,
        files: []*File{},
    }
    return &&fset
}

fun (s *FileSet) addFile(filename string, base int, size int) *File {
    if base < 0 {
        base = s.base
    }
    if base < s.base || size < 0 {
        panic("illegal base or size")
    }
    var lines = []int{}
    var zero = 0
    append(lines, zero)
    var file = File{
        name: runtime.strdup(filename),
        base: base,
        size: size,
        lines: lines,
    }
    var f = &&file
    base += size + 1
    s.base = base
    append(s.files, f)
    s.last = f
    return f
}

fun searchFiles(files *[]*File, x int) int {
    for var i = 0; i < len(*files); i++ {
        var f = (*files)[i]
        if f.base <= x && x <= f.base + f.size {
            return i
        }
    }
    return -1
}

fun (s *FileSet) file(p Pos) *File {
    var f = s.last
    if f != nil && f.base <= p && p <= f.base + f.size {
        return f
    }
    var i = searchFiles(&s.files, p)
    if i >= 0 {
        f = s.files[i]
        if p <= f.base + f.size {
            s.last = f
            return f
        }
    }
    return nil
}

fun (fset *FileSet) print() {
    for var i = 0; i < len(fset.files); i++ {
        var f = fset.files[i]
        var s = C.sprintf("%d: %s (base=%d, size=%d)", i, f.name, f.base, f.size)
        print(s)
        delete(s)
    }
}
