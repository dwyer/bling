package emitter

import "C"
import "bling/ast"
import "bling/token"
import "bytes"
import "runtime"

typ Emitter struct {
    buf bytes.Buffer
    indent int
    skipSemi bool
    pkg string
    forwardDecl bool
}

fun (e *Emitter) bytes() []char {
    return e.buf
}

fun (e *Emitter) string() string {
    return e.buf.string()
}

fun (e *Emitter) emitBytes(s []char) {
    e.buf.write(s, nil)
}

fun (e *Emitter) emitChars(s [?]const char, n int) {
    e.buf.writeChars(s, n, nil)
}

fun (e *Emitter) emitString(s string) {
    e.buf.writeString(s, nil)
}

fun (e *Emitter) emitSpace() {
    e.emitString(" ")
}

fun (e *Emitter) emitNewline() {
    e.emitString("\n")
}

fun (e *Emitter) emitTabs() {
    for var i = 0; i < e.indent; i++ {
        e.emitString("    ")
    }
}

fun (e *Emitter) emitToken(tok token.Token) {
    if e.skipSemi && tok == token.SEMICOLON {
        return
    }
    e.emitString(tok.string())
}

fun isSimpleType(t *ast.Expr) bool {
    if t == nil {
        return false
    }
    if t.kind == ast.TYPE_ARRAY && !t.array_.dynamic {
        t = t.array_.elt
    }
    switch t.kind {
    case ast.EXPR_PAREN, ast.EXPR_IDENT, ast.EXPR_SELECTOR:
        return true
    default:
        return false
    }
}

fun emitExpr(e *Emitter, expr *ast.Expr) {
    if !expr {
        panic("expr is nil")
    }
    switch expr.kind {
    case ast.EXPR_BASIC_LIT:
        e.emitString(expr.basic.value)
        break
    case ast.EXPR_BINARY:
        emitExpr(e, expr.binary.x)
        e.emitSpace()
        e.emitToken(expr.binary.op)
        e.emitSpace()
        emitExpr(e, expr.binary.y)
        break
    case ast.EXPR_CALL:
        emitExpr(e, expr.call.func)
        e.emitToken(token.LPAREN)
        for var i = 0; i < len(expr.call.args); i++ {
            if i > 0 {
                e.emitToken(token.COMMA)
                e.emitSpace()
            }
            emitExpr(e, expr.call.args[i])
        }
        e.emitToken(token.RPAREN)
        break
    case ast.EXPR_CAST:
        e.emitToken(token.TYPE)
        e.emitSpace()
        emitType(e, expr.cast.type)
        e.emitToken(token.LPAREN)
        emitExpr(e, expr.cast.expr)
        e.emitToken(token.RPAREN)
        break
    case ast.EXPR_COMPOSITE_LIT:
        if isSimpleType(expr.composite.type) {
            emitType(e, expr.composite.type)
        }
        e.emitToken(token.LBRACE)
        if len(expr.composite.list) > 0 {
            e.emitNewline()
            e.indent++
            for var i = 0; i < len(expr.composite.list); i++ {
                e.emitTabs()
                emitExpr(e, expr.composite.list[i])
                e.emitToken(token.COMMA)
                e.emitNewline()
            }
            e.indent--
            e.emitTabs()
        }
        e.emitToken(token.RBRACE)
        break
    case ast.EXPR_IDENT:
        e.emitString(expr.ident.name)
        break
    case ast.EXPR_INDEX:
        if isSimpleType(expr.index.x) {
            emitExpr(e, expr.index.x)
        } else {
            e.emitToken(token.LPAREN)
            emitExpr(e, expr.index.x)
            e.emitToken(token.RPAREN)
        }
        e.emitToken(token.LBRACK)
        emitExpr(e, expr.index.index)
        e.emitToken(token.RBRACK)
        break
    case ast.EXPR_KEY_VALUE:
        emitExpr(e, expr.keyValue.key)
        e.emitToken(token.COLON)
        e.emitSpace()
        emitExpr(e, expr.keyValue.value)
        break
    case ast.EXPR_PAREN:
        e.emitToken(token.LPAREN)
        emitExpr(e, expr.paren.x)
        e.emitToken(token.RPAREN)
        break
    case ast.EXPR_SELECTOR:
        emitExpr(e, expr.selector.x)
        e.emitToken(token.PERIOD)
        emitExpr(e, expr.selector.sel)
        break
    case ast.EXPR_STAR:
        e.emitToken(token.MUL)
        emitExpr(e, expr.star.x)
        break
    case ast.EXPR_TERNARY:
        emitExpr(e, expr.ternary.cond)
        e.emitSpace()
        e.emitToken(token.QUESTION_MARK)
        if expr.ternary.x {
            e.emitSpace()
            emitExpr(e, expr.ternary.x)
            e.emitSpace()
        }
        e.emitToken(token.COLON)
        e.emitSpace()
        emitExpr(e, expr.ternary.y)
        break
    case ast.EXPR_UNARY:
        if expr.unary.op == token.SIZEOF {
            e.emitToken(expr.unary.op)
            e.emitToken(token.LPAREN)
            emitType(e, expr.unary.x)
            e.emitToken(token.RPAREN)
        } else {
            e.emitToken(expr.unary.op)
            emitExpr(e, expr.unary.x)
        }
        break
    default:
        panic("Unknown expr")
        break
    }
}

fun emitStmt(e *Emitter, stmt *ast.Stmt) {
    switch stmt.kind {
    case ast.STMT_ASSIGN:
        emitExpr(e, stmt.assign.x)
        e.emitSpace()
        e.emitToken(stmt.assign.op)
        e.emitSpace()
        emitExpr(e, stmt.assign.y)
        break
    case ast.STMT_BLOCK:
        e.emitToken(token.LBRACE)
        e.emitNewline()
        e.indent++
        for var i = 0; i < len(stmt.block.stmts); i++ {
            switch stmt.block.stmts[i].kind {
            case ast.STMT_LABEL:
                break
            default:
                e.emitTabs()
                break
            }
            emitStmt(e, stmt.block.stmts[i])
            e.emitNewline()
        }
        e.indent--
        e.emitTabs()
        e.emitToken(token.RBRACE)
        break
    case ast.STMT_CASE:
        if len(stmt.case_.exprs) > 0 {
            e.emitToken(token.CASE)
            e.emitSpace()
            for var i = 0; i < len(stmt.case_.exprs); i++ {
                if i > 0 {
                    e.emitToken(token.COMMA)
                    e.emitSpace()
                }
                emitExpr(e, stmt.case_.exprs[i])
            }
        } else {
            e.emitToken(token.DEFAULT)
        }
        e.emitToken(token.COLON)
        if len(stmt.case_.stmts) > 0 {
            let first = stmt.case_.stmts[0]
            let oneline = false
            switch first.kind {
            case ast.STMT_BLOCK, ast.STMT_JUMP, ast.STMT_RETURN:
                break
            default:
                break
            }
            if oneline {
                e.emitSpace()
                emitStmt(e, first)
                e.emitNewline()
            } else {
                e.emitNewline()
                e.indent++
                for var i = 0; i < len(stmt.case_.stmts); i++ {
                    e.emitTabs()
                    emitStmt(e, stmt.case_.stmts[i])
                    e.emitNewline()
                }
                e.indent--
            }
        }
        break
    case ast.STMT_DECL:
        emitDecl(e, stmt.decl.decl)
        break
    case ast.STMT_EMPTY:
        e.emitToken(token.SEMICOLON)
        break
    case ast.STMT_EXPR:
        emitExpr(e, stmt.expr.x)
        break
    case ast.STMT_IF:
        e.emitToken(token.IF)
        e.emitSpace()
        emitExpr(e, stmt.if_.cond)
        e.emitSpace()
        emitStmt(e, stmt.if_.body)
        if stmt.if_.else_ {
            e.emitSpace()
            e.emitToken(token.ELSE)
            e.emitSpace()
            emitStmt(e, stmt.if_.else_)
        }
        break
    case ast.STMT_ITER:
        e.emitToken(stmt.iter.kind)
        if stmt.iter.kind == token.FOR {
            e.emitSpace()
            if stmt.iter.init {
                emitStmt(e, stmt.iter.init)
            }
            e.emitToken(token.SEMICOLON)
        }
        if stmt.iter.cond {
            e.emitSpace()
            emitExpr(e, stmt.iter.cond)
        }
        if stmt.iter.kind == token.FOR {
            e.emitToken(token.SEMICOLON)
            if stmt.iter.post {
                e.emitSpace()
                e.skipSemi = true
                emitStmt(e, stmt.iter.post)
                e.skipSemi = false
            }
        }
        e.emitSpace()
        emitStmt(e, stmt.iter.body)
        break
    case ast.STMT_JUMP:
        e.emitToken(stmt.jump.keyword)
        if stmt.jump.label {
            e.emitSpace()
            emitExpr(e, stmt.jump.label)
        }
        break
    case ast.STMT_LABEL:
        emitExpr(e, stmt.label.label)
        e.emitToken(token.COLON)
        e.emitNewline()
        e.emitTabs()
        emitStmt(e, stmt.label.stmt)
        break
    case ast.STMT_POSTFIX:
        emitExpr(e, stmt.postfix.x)
        e.emitToken(stmt.postfix.op)
        break
    case ast.STMT_RETURN:
        e.emitToken(token.RETURN)
        if stmt.return_.x {
            e.emitSpace()
            emitExpr(e, stmt.return_.x)
        }
        break
    case ast.STMT_SWITCH:
        e.emitToken(token.SWITCH)
        e.emitSpace()
        emitExpr(e, stmt.switch_.tag)
        e.emitSpace()
        e.emitToken(token.LBRACE)
        e.emitNewline()
        for var i = 0; i < len(stmt.switch_.stmts); i++ {
            e.emitTabs()
            emitStmt(e, stmt.switch_.stmts[i])
        }
        e.emitTabs()
        e.emitToken(token.RBRACE)
        break
    default:
        panic("Unknown stmt")
        break
    }
}

fun isVoid(type *ast.Expr) bool {
    return type == nil || (type.kind == ast.EXPR_IDENT && runtime.streq(type.ident.name, "void"))
}

fun emitType(e *Emitter, type *ast.Expr) {
    if type.isConst {
        e.emitToken(token.CONST)
        e.emitSpace()
    }
    switch type.kind {
    case ast.EXPR_IDENT, ast.EXPR_SELECTOR:
        emitExpr(e, type)
        break
    case ast.EXPR_STAR:
        type = type.star.x
        if type.kind == ast.TYPE_FUNC {
            e.emitToken(token.FUNC)
            e.emitToken(token.LPAREN)
            for var i = 0; i < len(type.func.params); i++ {
                if i > 0 {
                    e.emitToken(token.COMMA)
                    e.emitSpace()
                }
                emitDecl(e, type.func.params[i])
            }
            e.emitToken(token.RPAREN)
            if !isVoid(type.func.result) {
                e.emitSpace()
                emitType(e, type.func.result)
            }
        } else {
            e.emitToken(token.MUL)
            emitType(e, type)
        }
        break
    case ast.TYPE_ARRAY:
        e.emitToken(token.LBRACK)
        if !type.array_.dynamic {
            if type.array_.len {
                emitExpr(e, type.array_.len)
            } else {
                e.emitToken(token.QUESTION_MARK)
            }
        }
        e.emitToken(token.RBRACK)
        emitType(e, type.array_.elt)
        break
    case ast.TYPE_BUILTIN:
        e.emitString("/* builtin func ")
        e.emitString(type.builtin.name)
        e.emitString(" */")
        break
    case ast.TYPE_ELLIPSIS:
        e.emitToken(token.ELLIPSIS)
        break
    case ast.TYPE_ENUM:
        e.emitToken(token.ENUM)
        if len(type.enum_.enums) > 0 {
            e.emitSpace()
            e.emitToken(token.LBRACE)
            e.emitNewline()
            e.indent++
            for var i = 0; i < len(type.enum_.enums); i++ {
                let decl = type.enum_.enums[i]
                e.emitTabs()
                emitExpr(e, decl.value.name)
                if decl.value.value {
                    e.emitSpace()
                    e.emitToken(token.ASSIGN)
                    e.emitSpace()
                    emitExpr(e, decl.value.value)
                }
                e.emitNewline()
            }
            e.indent--
            e.emitTabs()
            e.emitToken(token.RBRACE)
        }
        break
    case ast.TYPE_FUNC:
        e.emitToken(token.LPAREN)
        for var i = 0; i < len(type.func.params); i++ {
            if i > 0 {
                e.emitToken(token.COMMA)
                e.emitSpace()
            }
            emitDecl(e, type.func.params[i])
        }
        e.emitToken(token.RPAREN)
        if !isVoid(type.func.result) {
            e.emitSpace()
            emitType(e, type.func.result)
        }
        break
    case ast.TYPE_MAP:
        e.emitToken(token.MAP)
        e.emitSpace()
        emitType(e, type.map_.val)
        break
    case ast.TYPE_NATIVE:
        e.emitString(type.native.name)
        break
    case ast.TYPE_STRUCT:
        e.emitToken(type.struct_.tok)
        if len(type.struct_.fields) > 0 {
            e.emitSpace()
            e.emitToken(token.LBRACE)
            e.emitNewline()
            e.indent++
            for var i = 0; i < len(type.struct_.fields); i++ {
                e.emitTabs()
                emitDecl(e, type.struct_.fields[i])
                e.emitNewline()
            }
            e.indent--
            e.emitTabs()
            e.emitToken(token.RBRACE)
        }
        break
    default:
        panic(C.sprintf("Unknown type: %d", type.kind))
    }
}

fun emitDecl(e *Emitter, decl *ast.Decl) {
    switch decl.kind {
    case ast.DECL_FIELD:
        if decl.field.name != nil {
            emitExpr(e, decl.field.name)
            e.emitSpace()
        }
        emitType(e, decl.field.type)
        break
    case ast.DECL_FUNC:
        e.emitToken(token.FUNC)
        e.emitSpace()
        emitExpr(e, decl.func.name)
        emitType(e, decl.func.type)
        if decl.func.body {
            e.emitSpace()
            emitStmt(e, decl.func.body)
        }
        break
    case ast.DECL_IMPORT:
        e.emitToken(token.IMPORT)
        e.emitSpace()
        emitExpr(e, decl.imp.path)
        break
    case ast.DECL_TYPE:
        e.emitToken(token.TYPE)
        e.emitSpace()
        emitExpr(e, decl.type.name)
        e.emitSpace()
        emitType(e, decl.type.type)
        break
    case ast.DECL_PRAGMA:
        e.emitToken(token.HASH)
        e.emitString(decl.pragma.lit)
        break
    case ast.DECL_VALUE:
        switch decl.value.kind {
        case token.VAR:
            e.emitToken(token.VAR)
            if decl.value.name {
                e.emitSpace()
                emitExpr(e, decl.value.name)
            }
            if decl.value.value {
                e.emitSpace()
                e.emitToken(token.ASSIGN)
                e.emitSpace()
                emitExpr(e, decl.value.value)
            }
            break
        case token.CONST:
            e.emitToken(token.HASH)
            e.emitString("define")
            e.emitSpace()
            emitExpr(e, decl.value.value)
            break
        default:
            panic(C.sprintf("bad kind for ast$DECL_VALUE: %s", decl.value.kind.string()))
            break
        }
        break
    default:
        panic("Unknown decl")
        break
    }
}

fun emitFile(e *Emitter, file *ast.File) {
    if file.name {
        e.pkg = file.name.ident.name
    }
    e.emitString("//")
    e.emitString(file.filename)
    e.emitNewline()
    if file.name != nil {
        e.emitToken(token.PACKAGE)
        e.emitSpace()
        emitExpr(e, file.name)
        e.emitNewline()
        e.emitNewline()
    }
    for var i = 0; i < len(file.imports); i++ {
        e.emitToken(token.IMPORT)
        e.emitSpace()
        emitExpr(e, file.imports[i].imp.path)
        e.emitNewline()
    }
    for var i = 0; i < len(file.decls); i++ {
        e.emitNewline()
        emitDecl(e, file.decls[i])
        e.emitNewline()
    }
}
