package types

import "C"
import "bling/ast"
import "bytes"
import "runtime"

typ Scope struct {
    outer *Scope
    objects map *ast.Object
    keys []string
    pkgName *ast.Expr
}

fun newScope(outer *Scope) *Scope {
    let s = Scope{
        outer: outer,
        objects: makemap(*ast.Object),
        keys: []string{},
    }
    return &&s
}

fun (s *Scope) delete() {
    delete(s.objects)
    delete(s.keys)
    delete(s)
}

fun (s *Scope) insert(obj *ast.Object) *ast.Object {
    let alt = s.objects[obj.name]
    if alt == nil {
        s.objects[obj.name] = obj
        append(s.keys, obj.name)
    }
    return alt
}

fun (s *Scope) lookup(name string) *ast.Object {
    return s.objects[name]
}

fun (s *Scope) print() {
    let buf = bytes.Buffer{}
    while s {
        let key string = nil
        for let iter = runtime.newMapIter(&s.objects); runtime.MapIter_next(&iter, &key); {
            let s = C.sprintf("%s- %s", buf.string(), key)
            print(s)
            delete(s)
        }
        s = s.outer
        buf.writeByte('\t', nil)
    }
}

fun (s *Scope) deepLookup(name string) *ast.Object {
    for ; s != nil; s = s.outer {
        let obj = s.lookup(name)
        if obj != nil {
            return obj
        }
    }
    return nil
}

fun resolve(scope *Scope, ident *ast.Expr) bool {
    let obj = scope.deepLookup(ident.ident.name)
    if obj != nil {
        ident.ident.obj = obj
        return true
    }
    return false
}
