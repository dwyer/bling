package build

import "bling/ast"
import "bling/emitter"
import "bling/parser"
import "bling/token"
import "bling/types"
import "bytes"
import "io/ioutil"
import "os"
import "paths"
import "subc/cemitter"
import "subc/cparser"
import "sys"
import "utils"

var AR_PATH *const char = "/usr/bin/ar"

var CC_PATH *const char = "/usr/bin/cc"

var GEN_PATH *const char = "gen"

var INCL_PATH *const char = "."

fun emit_rawfile(e *emitter.Emitter, filename *const char) {
    var err *utils.Error = NULL
    var src *char = ioutil.readFile(filename, &err)
    if err {
        panic(err.error)
    }
    emitter.emitString(e, src)
    free(src)
}

fun printStrArray(s **char) {
    for var i int = 0; s[i]; i++ {
        if i {
            sys.printf(" ")
        }
        sys.printf("%s", s[i])
    }
    sys.printf("\n")
}

fun execute(cmd *utils.Slice) {
    var args **char = utils.Slice_to_nil_array(*cmd)
    printStrArray(args)
    var code int = sys.run(args)
    if code != 0 {
        panic(sys.sprintf("- failed with code %d", code))
    }
    free(args)
}

fun Slice_appendStrLit(a *utils.Slice, s *const char) {
    utils.Slice_append(a, &s)
}

fun mkdirForFile(path *const char) {
    var dir *char = paths.dir(path)
    os.mkdirAll(dir, 0755, NULL)
    free(dir)
}

typedef Package struct {
    path *const char
    lib *os.FileInfo
    files **ast.File
    pkg *types.Package
}

typedef Builder struct {
    fset *token.FileSet
    force bool
    conf types.Config
    pkgs utils.Map
}

fun buildCFile(b *Builder, cFile *os.FileInfo) *os.FileInfo {
    var src *char = os.FileInfo_name(cFile)
    var dst *char = NULL
    {
        var i int = bytes.lastIndexByte(src, '.')
        var base *char = strdup(src)
        base[i] = '\0'
        dst = sys.sprintf("%s/%s.o", GEN_PATH, base)
        free(base)
    }
    var err *utils.Error = NULL
    var objFile *os.FileInfo = os.stat(dst, &err)
    var doBuild bool = objFile == NULL || os.FileInfo_modTime(cFile) > os.FileInfo_modTime(objFile)
    if b.force || doBuild {
        var cmd utils.Slice = {
            size: sizeof(*char),
        }
        Slice_appendStrLit(&cmd, CC_PATH)
        Slice_appendStrLit(&cmd, "-I")
        Slice_appendStrLit(&cmd, INCL_PATH)
        Slice_appendStrLit(&cmd, "-c")
        Slice_appendStrLit(&cmd, "-o")
        Slice_appendStrLit(&cmd, dst)
        Slice_appendStrLit(&cmd, src)
        mkdirForFile(dst)
        execute(&cmd)
        os.FileInfo_free(objFile)
        objFile = os.stat(dst, &err)
    }
    return objFile
}

fun buildCPackage(b *Builder, path *const char) *Package {
    var base *char = paths.base(path)
    var dst *char = sys.sprintf("%s/%s/lib%s.a", GEN_PATH, path, base)
    var objFiles utils.Slice = {
        size: sizeof(*os.FileInfo),
    }
    var latestUpdate os.Time = 0
    {
        var files **os.FileInfo = ioutil.readDir(path, NULL)
        for var i int = 0; files[i]; i++ {
            if bytes.hasSuffix(files[i]._name, ".bling") {
                var file *ast.File = parser.parseFile(b.fset, files[i]._name, types.universe())
                for var i int = 0; file.imports[i]; i++ {
                    var path *char = types.constant_stringVal(file.imports[i].imp.path)
                    var pkg *Package = _buildPackage(b, path)
                    var lib *os.FileInfo = pkg.lib
                    if lib != NULL {
                        utils.Slice_append(&objFiles, &lib)
                    }
                }
            } else if bytes.hasSuffix(files[i]._name, ".c") {
                var obj *os.FileInfo = buildCFile(b, files[i])
                utils.Slice_append(&objFiles, &obj)
                if latestUpdate < os.FileInfo_modTime(obj) {
                    latestUpdate = os.FileInfo_modTime(obj)
                }
            }
            os.FileInfo_free(files[i])
        }
    }
    var err *utils.Error = NULL
    var libFile *os.FileInfo = os.stat(dst, &err)
    if b.force || libFile == NULL || latestUpdate > os.FileInfo_modTime(libFile) {
        var cmd utils.Slice = {
            size: sizeof(*char),
        }
        Slice_appendStrLit(&cmd, "/usr/bin/ar")
        Slice_appendStrLit(&cmd, "rsc")
        Slice_appendStrLit(&cmd, dst)
        for var i int = 0; i < utils.Slice_len(&objFiles); i++ {
            var obj *os.FileInfo = NULL
            utils.Slice_get(&objFiles, i, &obj)
            utils.Slice_append(&cmd, &obj._name)
        }
        mkdirForFile(dst)
        execute(&cmd)
        os.FileInfo_free(libFile)
        libFile = os.stat(dst, &err)
    }
    var pkg Package = {
        path: path,
        lib: libFile,
    }
    return esc(pkg)
}

fun buildBlingPackage(b *Builder, path *const char) *Package {
    var pkg Package = {
        files: parser.parseDir(b.fset, path, types.universe(), NULL),
    }
    assert(pkg.files[0] && !pkg.files[1])
    var f *ast.File = pkg.files[0]
    pkg.pkg = types.checkFile(&b.conf, b.fset, f, NULL)
    var libs utils.Slice = {
        size: sizeof(*os.FileInfo),
    }
    var e emitter.Emitter = {
        forwardDecl: true,
    }
    emit_rawfile(&e, "bootstrap/bootstrap.h")
    var modified os.Time = 0
    for var i int = 0; f.imports[i]; i++ {
        var path *char = types.constant_stringVal(f.imports[i].imp.path)
        var pkg *Package = _buildPackage(b, path)
        var lib *os.FileInfo = pkg.lib
        assert(lib)
        if modified < os.FileInfo_modTime(lib) {
            modified = os.FileInfo_modTime(lib)
        }
        utils.Slice_append(&libs, &lib)
    }
    var base *char = paths.base(path)
    var libPath *char = sys.sprintf("%s/%s/lib%s.a", GEN_PATH, path, base)
    var objPath *char = sys.sprintf("%s/%s/%s.o", GEN_PATH, path, base)
    var cPath *char = sys.sprintf("%s/%s/%s.c", GEN_PATH, path, base)
    free(base)
    mkdirForFile(cPath)
    ioutil.writeFile(cPath, emitter.Emitter_string(&e), 0644, NULL)
    {
        var cmd utils.Slice = {
            size: sizeof(*char),
        }
        Slice_appendStrLit(&cmd, CC_PATH)
        Slice_appendStrLit(&cmd, "-c")
        Slice_appendStrLit(&cmd, "-o")
        Slice_appendStrLit(&cmd, objPath)
        Slice_appendStrLit(&cmd, cPath)
        execute(&cmd)
    }
    {
        var cmd utils.Slice = {
            size: sizeof(*char),
        }
        Slice_appendStrLit(&cmd, AR_PATH)
        Slice_appendStrLit(&cmd, "rsc")
        Slice_appendStrLit(&cmd, libPath)
        Slice_appendStrLit(&cmd, objPath)
        execute(&cmd)
    }
    return NULL
}

fun _buildPackage(b *Builder, path *const char) *Package {
    sys.printf("building %s\n", path)
    if streq(path, "os") || streq(path, "sys") {
        return buildCPackage(b, path)
    }
    return buildBlingPackage(b, path)
}

fun buildPackage(argv []*char) {
    assert(*argv)
    var path *char = *argv
    var builder Builder = {
        fset: token.newFileSet(),
        force: true,
        pkgs: utils.Map_init(sizeof(*Package)),
    }
    _buildPackage(&builder, path)
}
