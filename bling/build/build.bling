package build

import "bling/ast"
import "bling/emitter"
import "bling/parser"
import "bling/token"
import "bling/types"
import "bytes"
import "io/ioutil"
import "os"
import "paths"
import "subc/cemitter"
import "subc/cparser"
import "sys"
import "utils"

var AR_PATH *const char = "/usr/bin/ar"

var CC_PATH *const char = "/usr/bin/cc"

var GEN_PATH *const char = "gen"

var INCL_PATH *const char = "."

fun emit_rawfile(e *emitter.Emitter, filename *const char) {
    var err *utils.Error = NULL
    var src *char = ioutil.readFile(filename, &err)
    if err {
        panic(err.error)
    }
    emitter.emitString(e, src)
    free(src)
}

fun printStrArray(s **char) {
    for var i int = 0; s[i]; i++ {
        if i {
            sys.printf(" ")
        }
        sys.printf("%s", s[i])
    }
    sys.printf("\n")
}

fun execute(cmd *utils.Slice) {
    var args **char = utils.Slice_to_nil_array(*cmd)
    var code int = sys.run(args)
    if code != 0 {
        panic(sys.sprintf("- failed with code %d", code))
    }
    free(args)
}

fun Slice_appendStrLit(a *utils.Slice, s *const char) {
    utils.Slice_append(a, &s)
}

fun mkdirForFile(path *const char) {
    var dir *char = paths.dir(path)
    os.mkdirAll(dir, 0755, NULL)
    free(dir)
}

typedef Package struct {
    path *char
    lib *os.FileInfo
    pkg *types.Package
    modTime os.Time
    hPath *char
    cPath *char
    objPath *char
    objPaths utils.Slice
    libPath *char
    deps utils.Slice
}

typedef Builder struct {
    fset *token.FileSet
    info *types.Info
    force bool
    conf types.Config
    pkgs utils.Map
}

fun genObj(b *Builder, dst *const char, src *const char) {
    var cmd utils.Slice = {
        size: sizeof(*char),
    }
    Slice_appendStrLit(&cmd, CC_PATH)
    Slice_appendStrLit(&cmd, "-fms-extensions")
    Slice_appendStrLit(&cmd, "-Wno-microsoft-anon-tag")
    Slice_appendStrLit(&cmd, "-I")
    Slice_appendStrLit(&cmd, INCL_PATH)
    Slice_appendStrLit(&cmd, "-c")
    Slice_appendStrLit(&cmd, "-o")
    Slice_appendStrLit(&cmd, dst)
    Slice_appendStrLit(&cmd, src)
    mkdirForFile(dst)
    execute(&cmd)
}

fun buildCFile(b *Builder, cFile *os.FileInfo) *os.FileInfo {
    var src *char = os.FileInfo_name(cFile)
    var dst *char = NULL
    {
        var i int = bytes.lastIndexByte(src, '.')
        var base *char = strdup(src)
        base[i] = '\0'
        dst = sys.sprintf("%s/%s.o", GEN_PATH, base)
        free(base)
    }
    var err *utils.Error = NULL
    var objFile *os.FileInfo = os.stat(dst, &err)
    var doBuild bool = objFile == NULL || os.FileInfo_modTime(cFile) > os.FileInfo_modTime(objFile)
    if b.force || doBuild {
        genObj(b, dst, src)
        os.FileInfo_free(objFile)
        objFile = os.stat(dst, &err)
    }
    return objFile
}

fun newPackage(b *Builder, path *const char) Package {
    var base *char = paths.base(path)
    var genPath *char = paths.join2(GEN_PATH, path)
    var pkg Package = {
        path: strdup(path),
        pkg: types.check(&b.conf, path, b.fset, NULL, b.info),
        hPath: sys.sprintf("%s/%s.h", genPath, base),
        cPath: sys.sprintf("%s/%s.c", genPath, base),
        objPath: sys.sprintf("%s/%s.o", genPath, base),
        libPath: sys.sprintf("%s/%s.a", genPath, base),
        deps: {
            size: sizeof(*Package),
        },
    }
    free(genPath)
    free(base)
    return pkg
}

fun genHeader(b *Builder, pkg *Package) {
    var e emitter.Emitter = {}
    emitter.emitString(&e, "#pragma once")
    emitter.emitNewline(&e)
    emit_rawfile(&e, "bootstrap/bootstrap.h")
    cemitter.emitHeader(&e, pkg.pkg)
    var out *char = emitter.Emitter_string(&e)
    mkdirForFile(pkg.hPath)
    ioutil.writeFile(pkg.hPath, out, 0644, NULL)
    free(out)
}

fun getCFile(b *Builder, pkg *Package) {
    var e emitter.Emitter = {
        forwardDecl: true,
    }
    emit_rawfile(&e, "bootstrap/bootstrap.h")
    cemitter.emitPackage(&e, pkg.pkg)
    mkdirForFile(pkg.cPath)
    var out *char = emitter.Emitter_string(&e)
    ioutil.writeFile(pkg.cPath, out, 0644, NULL)
    free(out)
}

fun buildCPackage(b *Builder, path *const char) *Package {
    var objFiles utils.Slice = {
        size: sizeof(*os.FileInfo),
    }
    var pkg Package = newPackage(b, path)
    {
        var files **os.FileInfo = ioutil.readDir(path, NULL)
        for var i int = 0; files[i]; i++ {
            var checkTime bool = false
            var modTime os.Time = os.FileInfo_modTime(files[i])
            if bytes.hasSuffix(files[i]._name, ".bling") {
                if pkg.modTime < modTime {
                    pkg.modTime = modTime
                }
            } else if bytes.hasSuffix(files[i]._name, ".c") {
                if pkg.modTime < modTime {
                    pkg.modTime = modTime
                }
                var obj *os.FileInfo = buildCFile(b, files[i])
                utils.Slice_append(&objFiles, &obj)
                checkTime = true
                modTime = os.FileInfo_modTime(obj)
                if pkg.modTime < modTime {
                    pkg.modTime = modTime
                }
            }
            os.FileInfo_free(files[i])
        }
    }
    var err *utils.Error = NULL
    pkg.lib = os.stat(pkg.libPath, &err)
    if b.force || pkg.lib == NULL || pkg.modTime > os.FileInfo_modTime(pkg.lib) {
        genHeader(b, &pkg)
        var cmd utils.Slice = {
            size: sizeof(*char),
        }
        Slice_appendStrLit(&cmd, "/usr/bin/ar")
        Slice_appendStrLit(&cmd, "rsc")
        Slice_appendStrLit(&cmd, pkg.libPath)
        for var i int = 0; i < utils.Slice_len(&objFiles); i++ {
            var obj *os.FileInfo = NULL
            utils.Slice_get(&objFiles, i, &obj)
            utils.Slice_append(&cmd, &obj._name)
        }
        mkdirForFile(pkg.libPath)
        execute(&cmd)
        os.FileInfo_free(pkg.lib)
        pkg.lib = os.stat(pkg.libPath, &err)
        pkg.modTime = os.FileInfo_modTime(pkg.lib)
    }
    return esc(pkg)
}

fun buildBlingPackage(b *Builder, path *const char) *Package {
    var pkg Package = newPackage(b, path)
    var libs utils.Slice = {
        size: sizeof(*os.FileInfo),
    }
    for var i int = 0; i < utils.Slice_len(&pkg.pkg.imports); i++ {
        var impt *types.Package = NULL
        utils.Slice_get(&pkg.pkg.imports, i, &impt)
        var imp *Package = _buildPackage(b, impt.path)
        var lib *os.FileInfo = imp.lib
        assert(lib)
        if pkg.modTime < os.FileInfo_modTime(lib) {
            pkg.modTime = os.FileInfo_modTime(lib)
        }
        utils.Slice_append(&libs, &lib)
    }
    genHeader(b, &pkg)
    getCFile(b, &pkg)
    genObj(b, pkg.objPath, pkg.cPath)
    if streq(path, "cmd/blingc") {
        var cmd utils.Slice = {
            size: sizeof(*char),
        }
        Slice_appendStrLit(&cmd, CC_PATH)
        Slice_appendStrLit(&cmd, "-o")
        Slice_appendStrLit(&cmd, "blingc.out")
        Slice_appendStrLit(&cmd, pkg.objPath)
        {
            var pkg *Package = NULL
            var iter utils.MapIter = utils.NewMapIter(&b.pkgs)
            while utils.MapIter_next(&iter, NULL, &pkg) {
                Slice_appendStrLit(&cmd, pkg.lib._name)
            }
        }
        execute(&cmd)
    } else {
        var cmd utils.Slice = {
            size: sizeof(*char),
        }
        Slice_appendStrLit(&cmd, AR_PATH)
        Slice_appendStrLit(&cmd, "rsc")
        Slice_appendStrLit(&cmd, pkg.libPath)
        Slice_appendStrLit(&cmd, pkg.objPath)
        execute(&cmd)
        pkg.lib = os.stat(pkg.libPath, NULL)
    }
    return esc(pkg)
}

fun _buildPackage(b *Builder, path *const char) *Package {
    var pkg *Package = NULL
    utils.Map_get(&b.pkgs, path, &pkg)
    if pkg {
        return pkg
    }
    if streq(path, "bootstrap") || streq(path, "os") || streq(path, "sys") {
        pkg = buildCPackage(b, path)
    } else {
        pkg = buildBlingPackage(b, path)
    }
    utils.Map_set(&b.pkgs, path, &pkg)
    return pkg
}

fun buildPackage(argv []*char) {
    assert(*argv)
    var path *char = *argv
    var builder Builder = {
        fset: token.newFileSet(),
        info: types.newInfo(),
        force: true,
        pkgs: utils.Map_init(sizeof(*Package)),
    }
    _buildPackage(&builder, "bootstrap")
    _buildPackage(&builder, path)
}
