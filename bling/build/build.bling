package build

import "bling/ast"
import "bling/emitter"
import "bling/parser"
import "bling/token"
import "bling/types"
import "bytes"
import "io/ioutil"
import "os"
import "paths"
import "subc/cemitter"
import "subc/cparser"
import "sys"
import "utils"

var AR_PATH *const char = "/usr/bin/ar"

var CC_PATH *const char = "/usr/bin/cc"

var GEN_PATH *const char = "gen"

var INCL_PATH *const char = "."

var VERBOSE const bool = true

fun emit_rawfile(e *emitter.Emitter, filename *const char) {
    var err *utils.Error = NULL
    var src *char = ioutil.readFile(filename, &err)
    if err {
        panic(err.error)
    }
    emitter.emitString(e, src)
    sys.free(src)
}

fun printStrArray(s [array]*char) {
    for var i int = 0; i < len(s); i++ {
        if i {
            sys.printf(" ")
        }
        sys.printf("%s", s[i])
    }
    sys.printf("\n")
}

fun execute(cmd *[array]*char) {
    if VERBOSE {
        printStrArray(*cmd)
    }
    var args **char = utils.nilArray(cmd)
    var code int = os.exec(args, NULL)
    if code != 0 {
        panic(sys.sprintf("- failed with code %d", code))
    }
    sys.free(args)
}

fun mkdirForFile(path *const char) {
    var dir *char = paths.dir(path)
    os.mkdirAll(dir, 0755, NULL)
    sys.free(dir)
}

typ Package struct {
    path *char
    pkg *types.Package
    hPath *char
    cPath *char
    objPath *char
    objPaths [array]*char
    libPath *char
    libModTime os.Time
    srcModTime os.Time
    deps [array]*Package
    isCmd bool
}

typ Builder struct {
    fset *token.FileSet
    info *types.Info
    force bool
    conf types.Config
    pkgs map *Package
}

fun newBuilder(fset *token.FileSet) *Builder {
    var builder Builder = {
        fset: fset,
        info: types.newInfo(),
        force: false,
        pkgs: utils.Map_make(sizeof(*Package)),
    }
    return &&builder
}

fun genObj(b *Builder, dst *const char, src *const char) {
    var cmd [array]*char = makearray(*char)
    append(cmd, CC_PATH)
    append(cmd, typ *char("-fms-extensions"))
    append(cmd, typ *char("-Wno-microsoft-anon-tag"))
    append(cmd, typ *char("-g"))
    append(cmd, typ *char("-I"))
    append(cmd, INCL_PATH)
    append(cmd, typ *char("-c"))
    append(cmd, typ *char("-o"))
    append(cmd, dst)
    append(cmd, src)
    mkdirForFile(dst)
    execute(&cmd)
}

fun getFileModTime(path *const char) os.Time {
    var t os.Time = 0
    var err *utils.Error = NULL
    var info *os.FileInfo = os.stat(path, &err)
    if info {
        t = os.FileInfo_modTime(info)
        os.FileInfo_free(info)
    }
    return t
}

fun getSrcModTime(path *const char) os.Time {
    var t os.Time = 0
    var files [array]*os.FileInfo = ioutil.readDir(path, NULL)
    for var i int = 0; i < len(files); i++ {
        var file *os.FileInfo = files[i]
        var modTime os.Time = os.FileInfo_modTime(file)
        if bytes.hasSuffix(os.FileInfo_name(file), ".bling") {
            if t < modTime {
                t = modTime
            }
        }
        os.FileInfo_free(file)
    }
    utils.Slice_unmake(&files)
    return t
}

fun buildCFile(b *Builder, cFile *os.FileInfo) *os.FileInfo {
    var src *char = os.FileInfo_name(cFile)
    var dst *char = NULL
    {
        var i int = bytes.lastIndexByte(src, '.')
        var base *char = sys.strdup(src)
        base[i] = '\0'
        dst = sys.sprintf("%s/%s.o", GEN_PATH, base)
        sys.free(base)
    }
    var err *utils.Error = NULL
    var objFile *os.FileInfo = os.stat(dst, &err)
    var doBuild bool = objFile == NULL || os.FileInfo_modTime(cFile) > os.FileInfo_modTime(objFile)
    if b.force || doBuild {
        genObj(b, dst, src)
        os.FileInfo_free(objFile)
        objFile = os.stat(dst, &err)
    }
    return objFile
}

fun newPackage(b *Builder, path *const char) Package {
    var base *char = paths.base(path)
    var typesPkg *types.Package = types.check(&b.conf, path, b.fset, NULL, b.info)
    var isCmd bool = typesPkg.name ? sys.streq(typesPkg.name, "main") : false
    var genPath *char = paths.join2(GEN_PATH, path)
    var libPath *char = sys.sprintf("%s/%s.a", genPath, base)
    if isCmd {
        libPath = sys.sprintf("%s/%s", genPath, base)
    } else {
        libPath = sys.sprintf("%s/%s.a", genPath, base)
    }
    var pkg Package = {
        path: sys.strdup(path),
        pkg: typesPkg,
        hPath: sys.sprintf("%s/%s.h", genPath, base),
        cPath: sys.sprintf("%s/%s.c", genPath, base),
        objPath: sys.sprintf("%s/%s.o", genPath, base),
        libPath: libPath,
        libModTime: getFileModTime(libPath),
        srcModTime: getSrcModTime(path),
        deps: makearray(*Package),
        isCmd: isCmd,
    }
    sys.free(genPath)
    sys.free(base)
    for var i int = 0; i < len(pkg.pkg.imports); i++ {
        var dep *Package = _buildPackage(b, pkg.pkg.imports[i].path)
        append(pkg.deps, dep)
        if pkg.srcModTime < dep.srcModTime {
            pkg.srcModTime = dep.srcModTime
        }
    }
    return pkg
}

fun emitInclude(e *emitter.Emitter, path *const char) {
    var s *char = sys.sprintf("#include \"%s\"\n", path)
    emitter.emitString(e, s)
    sys.free(s)
}

fun writeFile(path *const char, out *const char) {
    if VERBOSE {
    }
    mkdirForFile(path)
    ioutil.writeFile(path, out, 0644, NULL)
}

fun genHeader(b *Builder, pkg *Package) {
    var e emitter.Emitter = {}
    emitter.emitString(&e, "#pragma once")
    emitter.emitNewline(&e)
    emit_rawfile(&e, "bootstrap/bootstrap.h")
    for var i int = 0; i < len(pkg.deps); i++ {
        emitInclude(&e, pkg.deps[i].hPath)
    }
    cemitter.emitHeader(&e, pkg.pkg)
    var out *char = emitter.Emitter_string(&e)
    writeFile(pkg.hPath, out)
    sys.free(out)
}

fun getCFile(b *Builder, pkg *Package) {
    var e emitter.Emitter = {}
    emitInclude(&e, pkg.hPath)
    cemitter.emitBody(&e, pkg.pkg)
    var out *char = emitter.Emitter_string(&e)
    writeFile(pkg.cPath, out)
    sys.free(out)
}

fun buildCPackage(b *Builder, path *const char) *Package {
    var pkg Package = newPackage(b, path)
    var objFiles [array]*char = makearray(*char)
    {
        var files [array]*os.FileInfo = ioutil.readDir(path, NULL)
        for var i int = 0; i < len(files); i++ {
            var checkTime bool = false
            var file *os.FileInfo = files[i]
            var modTime os.Time = os.FileInfo_modTime(file)
            if bytes.hasSuffix(os.FileInfo_name(file), ".bling") {
                if pkg.srcModTime < modTime {
                    pkg.srcModTime = modTime
                }
            } else if bytes.hasSuffix(os.FileInfo_name(file), ".c") {
                if pkg.srcModTime < modTime {
                    pkg.srcModTime = modTime
                }
                var obj *os.FileInfo = buildCFile(b, file)
                append(objFiles, obj._name)
                checkTime = true
                modTime = os.FileInfo_modTime(obj)
                if pkg.srcModTime < modTime {
                    pkg.srcModTime = modTime
                }
            }
            os.FileInfo_free(file)
        }
    }
    if b.force || pkg.srcModTime > pkg.libModTime {
        if VERBOSE {
        }
        genHeader(b, &pkg)
        var cmd [array]*char = makearray(*char)
        append(cmd, AR_PATH)
        append(cmd, typ *char("rsc"))
        append(cmd, pkg.libPath)
        for var i int = 0; i < len(objFiles); i++ {
            append(cmd, objFiles[i])
        }
        mkdirForFile(pkg.libPath)
        execute(&cmd)
        pkg.libModTime = getFileModTime(pkg.libPath)
    }
    return &&pkg
}

fun buildBlingPackage(b *Builder, path *const char) *Package {
    var pkg Package = newPackage(b, path)
    if b.force || pkg.srcModTime > pkg.libModTime {
        genHeader(b, &pkg)
        getCFile(b, &pkg)
        genObj(b, pkg.objPath, pkg.cPath)
        if VERBOSE {
        }
        if pkg.isCmd {
            var cmd [array]*char = makearray(*char)
            append(cmd, CC_PATH)
            append(cmd, typ *char("-g"))
            append(cmd, typ *char("-o"))
            append(cmd, pkg.libPath)
            append(cmd, pkg.objPath)
            var pkg *Package = NULL
            var iter utils.MapIter = utils.NewMapIter(&b.pkgs)
            while utils.MapIter_next(&iter, NULL, &pkg) {
                append(cmd, pkg.libPath)
            }
            execute(&cmd)
        } else {
            var cmd [array]*char = makearray(*char)
            append(cmd, AR_PATH)
            append(cmd, typ *char("rsc"))
            append(cmd, pkg.libPath)
            append(cmd, pkg.objPath)
            execute(&cmd)
        }
    }
    return &&pkg
}

fun _buildPackage(b *Builder, path *const char) *Package {
    var pkg *Package = NULL
    utils.Map_get(&b.pkgs, path, &pkg)
    if pkg {
        return pkg
    }
    if VERBOSE {
    }
    if sys.streq(path, "bootstrap") || sys.streq(path, "sys") {
        pkg = buildCPackage(b, path)
    } else {
        pkg = buildBlingPackage(b, path)
    }
    utils.Map_set(&b.pkgs, path, &pkg)
    return pkg
}

fun buildPackage(b *Builder, path *const char) {
    var clean = paths.clean(path)
    _buildPackage(b, "bootstrap")
    _buildPackage(b, clean)
    sys.free(clean)
}
