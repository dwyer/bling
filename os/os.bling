package os

import "C"
import "paths"
import "runtime"
import "sys"

let args = []string{}

typ O enum {
    O_RDONLY = sys.O_RDONLY
    O_WRONLY = sys.O_WRONLY
    O_RDWR = sys.O_RDWR
    O_APPEND = sys.O_APPEND
    O_CREAT = sys.O_CREAT
    O_TRUNC = sys.O_TRUNC
    O_EXCL = sys.O_EXCL
}

typ Time u64

typ FileMode u32

typ File struct {
    fd uintptr
    name string
    _isDir bool
}

typ FileInfo struct {
    _name string
    _sys voidptr
}

let _stdin File = {
    fd: sys.STDIN_FILENO,
    name: "/dev/stdin",
}

let _stdout File = {
    fd: sys.STDOUT_FILENO,
    name: "/dev/stdout",
}

let _stderr File = {
    fd: sys.STDERR_FILENO,
    name: "/dev/stderr",
}

let stdin *File = &_stdin
let stdout *File = &_stdout
let stderr *File = &_stderr

fun _throwPathError(path string, err *runtime.Error, e **runtime.Error) {
    if err {
        let msg = err.error
        err.error = C.sprintf("PathError: %s: %s", path, msg)
        delete(msg)
        runtime.Error_move(err, e)
    }
}

fun _throwFileError(file *File, err *runtime.Error, e **runtime.Error) {
    if err {
        if e == nil {
            file.close(nil) // close the file before we panic
        }
        _throwPathError(file.name, err, e)
    }
}

fun newFile(fd uintptr, name string) *File {
    let file File = {
        name: runtime.strdup(name),
        fd: fd,
    }
    return &&file
}

fun openFile(filename string, mode int, perm int, e **runtime.Error) *File {
    let err *runtime.Error = nil
    let fd = sys.open(filename, mode, perm, &err)
    if err {
        _throwPathError(filename, err, e)
        return nil
    }
    return newFile(fd, filename)
}

fun open(filename string, e **runtime.Error) *File {
    return openFile(filename, O_RDONLY, 0, e)
}

fun create(filename string, e **runtime.Error) *File {
    return openFile(filename, O_CREAT | O_TRUNC | O_RDWR, 0644, e)
}

fun (file *File) read(b []char, e **runtime.Error) int {
    let err *runtime.Error = nil
    let r = sys.read(file.fd, b, &err)
    _throwFileError(file, err, e)
    return r
}

fun (file *File) write(b []char, e **runtime.Error) int {
    let err *runtime.Error = nil
    let n = sys.write(file.fd, b, &err)
    _throwFileError(file, err, e)
    return n
}

fun (file *File) close(e **runtime.Error) {
    let err *runtime.Error = nil
    if file._isDir {
        sys.closedir(voidptr(file.fd), &err)
    } else {
        sys.close(file.fd, &err)
    }
    _throwPathError(file.name, err, e)
}

fun stat(name string, e **runtime.Error) *FileInfo {
    let st = sys.Stat{}
    let err *runtime.Error = nil
    sys.stat(name, &st, &err)
    if err {
        _throwPathError(name, err, e)
        return nil
    }
    let info = FileInfo{
        _name: runtime.strdup(name),
        _sys: &&st,
    }
    return &&info
}

fun (info *FileInfo) free() {
    delete(info._name)
    delete(info._sys)
    delete(info)
}

fun openDir(name string, e **runtime.Error) *File {
    let err *runtime.Error = nil
    let dp = sys.opendir(name, &err)
    if err {
        _throwPathError(name, err, e)
        return nil
    }
    let file = newFile(uintptr(dp), name)
    file._isDir = true
    return file
}

fun readdirnames(file *File, e **runtime.Error) []string {
    let arr = []string{}
    let dp sys.Dir = sys.Dir(file.fd)
    for {
        let err *runtime.Error = nil
        let dirent = sys.readdir(dp, &err)
        if dirent == nil {
            break
        }
        let name = dirent.name()
        if name[0] == '.' {
            continue
        }
        append(arr, runtime.strdup(name))
    }
    return arr
}

fun readdir(file *File, e **runtime.Error) []*FileInfo {
    let err *runtime.Error = nil
    let names = readdirnames(file, &err)
    let arr = []*FileInfo{}
    if err != nil {
        _throwFileError(file, err, e)
        return arr
    }
    for var i = 0; i < len(names); i++ {
        let path = paths.join2(file.name, names[i])
        delete(names[i])
        let info *FileInfo = stat(path, &err)
        if err != nil {
            _throwFileError(file, err, e)
            _throwPathError(file.name, err, e)
            return arr
        }
        append(arr, info)
    }
    delete(names)
    return arr
}

fun (info *FileInfo) name() string {
    return info._name
}

fun (info *FileInfo) size() u64 {
    let st = typ *sys.Stat(info.sys())
    return st.size
}

fun (info *FileInfo) mode() FileMode {
    let st = typ *sys.Stat(info.sys())
    return st.mode
}

fun (info *FileInfo) modTime() Time {
    let st = typ *sys.Stat(info.sys())
    return st.mtime
}

fun (info *FileInfo) isDir() bool {
    let st = typ *sys.Stat(info.sys())
    return ((st.mode & 0170000) == 0040000)
}

fun (info *FileInfo) sys() voidptr {
    return info._sys
}

fun tempDir() string {
    let tmpdir = sys.getenv("TMPDIR")
    if tmpdir {
        return tmpdir
    }
    return "/tmp"
}

fun mkdir(path string, mode u32, e **runtime.Error) {
    let err *runtime.Error = nil
    sys.mkdir(path, mode, &err)
    _throwPathError(path, err, e)
}

fun mkdirAll(path string, mode u32, e **runtime.Error) {
    // TODO check if exists first
    let dir = paths.dir(path)
    if !runtime.streq(dir, ".") {
        mkdirAll(dir, mode, e)
    }
    delete(dir)
    let err *runtime.Error = nil
    mkdir(path, mode, &err)
    switch sys.errno() {
    case 0, sys.EEXIST:
        break
    default:
        runtime.Error_move(err, e)
        break
    }
}

fun exec(argv [?]const string, e **runtime.Error) int {
    let status = -1
    let err *runtime.Error = nil
    let pid = sys.fork(&err)
    if err == nil {
        if pid == 0 {
            sys.exec(argv[0], argv, sys.environ(), &err)
        } else {
            sys.waitpid(pid, &status, 0, &err)
        }
    }
    if err {
        runtime.Error_move(err, e)
    }
    return status
}

fun exit(status int) {
    sys.exit(status)
}
