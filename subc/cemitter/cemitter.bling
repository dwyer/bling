package cemitter

import "C"
import "bling/ast"
import "bling/emitter"
import "bling/token"
import "bling/types"
import "runtime"

fun isSimpleType(type *ast.Expr) bool {
    for {
        switch type.kind {
        case ast.TYPE_STRUCT:
            return false
        case ast.TYPE_ARRAY:
            type = type.array_.elt
            break
        default:
            return true
        }
    }
}

fun emitZeroValue(e *emitter.Emitter, t *ast.Expr) {
    let b = types.baseType(t)
    switch b.kind {
    case ast.EXPR_STAR:
        e.emitString("nil")
        break
    case ast.TYPE_ARRAY:
    case ast.TYPE_STRUCT:
        e.emitToken(token.LPAREN)
        emitType(e, t, nil)
        e.emitToken(token.RPAREN)
        e.emitToken(token.LBRACK)
        e.emitToken(token.RBRACK)
        break
    default:
        e.emitToken(token.LPAREN)
        emitType(e, t, nil)
        e.emitToken(token.RPAREN)
        e.emitString("0")
        break
    }
}

fun emitSelectorExpr(e *emitter.Emitter, expr *ast.Expr) {
    if expr.kind == ast.EXPR_SELECTOR {
        if expr.selector.tok == token.QUESTION_PERIOD {
            emitSelectorExpr(e, expr.selector.x)
            e.emitSpace()
            e.emitToken(token.LAND)
            e.emitSpace()
        }
        emitSelector(e, expr, true)
    } else {
        emitExpr(e, expr)
    }
}

fun emitSelector(e *emitter.Emitter, expr *ast.Expr, ignoreOpt bool) {
    let isOpt = expr.selector.tok == token.QUESTION_PERIOD 
    if !ignoreOpt && isOpt {
        e.emitToken(token.LPAREN)
        emitSelectorExpr(e, expr.selector.x)
        e.emitSpace()
        e.emitToken(token.QUESTION_MARK)
        e.emitSpace()
        emitSelector(e, expr, true)
        e.emitSpace()
        e.emitToken(token.COLON)
        e.emitSpace()
        emitZeroValue(e, types.exprType(expr.selector.sel))
        e.emitToken(token.RPAREN)
    } else {
        if expr.selector.x.kind == ast.EXPR_SELECTOR {
            emitSelector(e, expr.selector.x, true)
        } else {
            emitExpr(e, expr.selector.x)
        }
        if let t = types.exprType(expr.selector.x); types.isPointer(t) {
            e.emitToken(token.ARROW)
        } else {
            e.emitToken(token.PERIOD)
        }
        emitExpr(e, expr.selector.sel)
    }
}

fun emitExpr(e *emitter.Emitter, expr *ast.Expr) {
    switch expr.kind {
    case ast.EXPR_BASIC_LIT:
        if expr.basic.kind == token.STRING {
            e.emitToken(token.LPAREN)
            e.emitString("string")
            e.emitToken(token.RPAREN)
        }
        e.emitString(expr.basic.value)
        break
    case ast.EXPR_BINARY:
        emitExpr(e, expr.binary.x)
        e.emitSpace()
        e.emitToken(expr.binary.op)
        e.emitSpace()
        emitExpr(e, expr.binary.y)
        break
    case ast.EXPR_CALL:
        var recv *ast.Expr = nil
        var func = expr.call.func
        if func.kind == ast.EXPR_SELECTOR && func.selector.tok == token.FUNC {
            recv = func.selector.x
            func = func.selector.sel
        }
        if types.isType(expr.call.func) {
            e.emitToken(token.LPAREN)
            emitType(e, expr.call.func, nil)
            e.emitToken(token.RPAREN)
        } else {
            emitExpr(e, expr.call.func)
        }
        e.emitToken(token.LPAREN)
        if recv != nil {
            emitExpr(e, recv)
        }
        for var i = 0; i < len(expr.call.args); i++ {
            if i > 0 || recv != nil {
                e.emitToken(token.COMMA)
                e.emitSpace()
            }
            let arg = expr.call.args[i]
            if types.isType(arg) {
                emitType(e, arg, nil)
            } else {
                emitExpr(e, arg)
            }
        }
        e.emitToken(token.RPAREN)
        break
    case ast.EXPR_CAST:
        e.emitToken(token.LPAREN)
        emitType(e, expr.cast.type, nil)
        e.emitToken(token.RPAREN)
        emitExpr(e, expr.cast.expr)
        break
    case ast.EXPR_COMPOSITE_LIT:
        if isSimpleType(expr.composite.type) {
            e.emitToken(token.LPAREN)
            emitType(e, expr.composite.type, nil)
            e.emitToken(token.RPAREN)
        }
        e.emitToken(token.LBRACE)
        if len(expr.composite.list) > 0 {
            e.emitNewline()
            e.indent++
            for var i = 0; i < len(expr.composite.list); i++ {
                e.emitTabs()
                emitExpr(e, expr.composite.list[i])
                e.emitToken(token.COMMA)
                e.emitNewline()
            }
            e.indent--
            e.emitTabs()
        }
        e.emitToken(token.RBRACE)
        break
    case ast.EXPR_IDENT:
        if expr.ident.obj == nil {
            // C.printf("warning: not resolved: %s\n", expr.ident.name)
        }
        if expr.ident.obj?.scope?.pkgName {
            if !runtime.streq(expr.ident.obj.scope.pkgName.ident.name, "main") {
                emitExpr(e, expr.ident.obj.scope.pkgName)
                e.emitToken(token.DOLLAR)
            }
        }
        e.emitString(expr.ident.name)
        break
    case ast.EXPR_INDEX:
        let t = types.baseType(types.exprType(expr.index.x))
        if types.isDynamicArray(t) {
            e.emitString("$$arrayget")
            e.emitToken(token.LPAREN)
            emitType(e, t.array_.elt, nil)
            e.emitToken(token.COMMA)
            e.emitSpace()
            emitExpr(e, expr.index.x)
            e.emitToken(token.COMMA)
            e.emitSpace()
            emitExpr(e, expr.index.index)
            e.emitToken(token.RPAREN)
        } else if types.isMap(t) {
            e.emitString("$$mapget")
            e.emitToken(token.LPAREN)
            emitType(e, t.map_.val, nil)
            e.emitToken(token.COMMA)
            e.emitSpace()
            emitExpr(e, expr.index.x)
            e.emitToken(token.COMMA)
            e.emitSpace()
            emitExpr(e, expr.index.index)
            e.emitToken(token.RPAREN)
        } else {
            emitExpr(e, expr.index.x)
            e.emitToken(token.LBRACK)
            emitExpr(e, expr.index.index)
            e.emitToken(token.RBRACK)
        }
        break
    case ast.EXPR_KEY_VALUE:
        if expr.keyValue.isArray {
            e.emitToken(token.LBRACK)
            emitExpr(e, expr.keyValue.key)
            e.emitToken(token.RBRACK)
        } else {
            e.emitToken(token.PERIOD)
            emitExpr(e, expr.keyValue.key)
        }
        e.emitSpace()
        e.emitToken(token.ASSIGN)
        e.emitSpace()
        emitExpr(e, expr.keyValue.value)
        break
    case ast.EXPR_PAREN:
        e.emitToken(token.LPAREN)
        emitExpr(e, expr.paren.x)
        e.emitToken(token.RPAREN)
        break
    case ast.EXPR_SELECTOR:
        switch expr.selector.tok {
        case token.PERIOD, token.QUESTION_PERIOD:
            emitSelector(e, expr, false)
            break
        default:
            emitExpr(e, expr.selector.sel)
            break
        }
        break
    case ast.EXPR_STAR:
        e.emitToken(token.MUL)
        emitExpr(e, expr.star.x)
        break
    case ast.EXPR_TERNARY:
        emitExpr(e, expr.ternary.cond)
        e.emitSpace()
        e.emitToken(token.QUESTION_MARK)
        if expr.ternary.x {
            e.emitSpace()
            emitExpr(e, expr.ternary.x)
            e.emitSpace()
        }
        e.emitToken(token.COLON)
        e.emitSpace()
        emitExpr(e, expr.ternary.y)
        break
    case ast.EXPR_UNARY:
        if expr.unary.op == token.LAND {
            e.emitString("$$ESC")
            e.emitToken(token.LPAREN)
        } else if expr.unary.op == token.SIZEOF {
            e.emitToken(token.SIZEOF)
            e.emitToken(token.LPAREN)
            emitType(e, expr.unary.x, nil)
            e.emitToken(token.RPAREN)
        } else {
            e.emitToken(expr.unary.op)
        }
        emitExpr(e, expr.unary.x)
        if expr.unary.op == token.LAND {
            e.emitToken(token.RPAREN)
        }
        break
    default:
        panic(C.sprintf("Unknown expr: %d", expr.kind))
        break
    }
}

fun emitStmt(e *emitter.Emitter, stmt *ast.Stmt) {
    switch stmt.kind {
    case ast.STMT_ASSIGN:
        var isMap = false
        let x = stmt.assign.x
        if x.kind == ast.EXPR_INDEX {
            let t = types.baseType(types.exprType(x.index.x))
            isMap = types.isMap(t)
        }
        if isMap {
            e.emitString("$$mapset")
            e.emitToken(token.LPAREN)
            emitExpr(e, x.index.x)
            e.emitToken(token.COMMA)
            emitExpr(e, x.index.index)
            e.emitToken(token.COMMA)
            emitExpr(e, stmt.assign.y)
            e.emitToken(token.RPAREN)
            e.emitToken(token.SEMICOLON)
        } else {
            emitExpr(e, stmt.assign.x)
            e.emitSpace()
            e.emitToken(stmt.assign.op)
            e.emitSpace()
            emitExpr(e, stmt.assign.y)
            e.emitToken(token.SEMICOLON)
        }
        break
    case ast.STMT_BLOCK:
        e.emitToken(token.LBRACE)
        e.emitNewline()
        e.indent++
        for var i = 0; i < len(stmt.block.stmts); i++ {
            switch stmt.block.stmts[i].kind {
            case ast.STMT_LABEL:
                break
            default:
                e.emitTabs()
                break
            }
            emitStmt(e, stmt.block.stmts[i])
            e.emitNewline()
        }
        e.indent--
        e.emitTabs()
        e.emitToken(token.RBRACE)
        break
    case ast.STMT_CASE:
        if len(stmt.case_.exprs) > 0 {
            for var i = 0; i < len(stmt.case_.exprs); i++ {
                if i > 0 {
                    e.emitToken(token.COLON)
                    e.emitNewline()
                    e.emitTabs()
                }
                e.emitToken(token.CASE)
                e.emitSpace()
                emitExpr(e, stmt.case_.exprs[i])
            }
        } else {
            e.emitToken(token.DEFAULT)
        }
        e.emitToken(token.COLON)
        e.emitSpace()
        e.emitToken(token.LBRACE)
        e.emitNewline()
        e.indent++
        for var i = 0; i < len(stmt.case_.stmts); i++ {
            e.emitTabs()
            emitStmt(e, stmt.case_.stmts[i])
            e.emitNewline()
        }
        e.indent--
        e.emitTabs()
        e.emitToken(token.RBRACE)
        e.emitNewline()
        break
    case ast.STMT_DECL:
        emitDecl(e, stmt.decl.decl)
        break
    case ast.STMT_EMPTY:
        e.emitToken(token.SEMICOLON)
        break
    case ast.STMT_EXPR:
        emitExpr(e, stmt.expr.x)
        e.emitToken(token.SEMICOLON)
        break
    case ast.STMT_IF:
        if stmt.if_.init {
            e.emitToken(token.LBRACE)
            e.emitNewline()
            e.indent++
            e.emitTabs()
            emitStmt(e, stmt.if_.init)
            e.emitNewline()
            e.emitTabs()
        }
        e.emitToken(token.IF)
        e.emitSpace()
        e.emitToken(token.LPAREN)
        emitExpr(e, stmt.if_.cond)
        e.emitToken(token.RPAREN)
        e.emitSpace()
        emitStmt(e, stmt.if_.body)
        if stmt.if_.else_ {
            e.emitSpace()
            e.emitToken(token.ELSE)
            e.emitSpace()
            emitStmt(e, stmt.if_.else_)
        }
        if stmt.if_.init {
            e.emitNewline()
            e.indent--
            e.emitTabs()
            e.emitToken(token.RBRACE)
        }
        break
    case ast.STMT_ITER:
        e.emitToken(stmt.iter.kind)
        e.emitSpace()
        e.emitToken(token.LPAREN)
        if stmt.iter.kind == token.FOR {
            if stmt.iter.init {
                emitStmt(e, stmt.iter.init)
                e.emitSpace()
            } else {
                e.emitToken(token.SEMICOLON)
                e.emitSpace()
            }
        }
        if stmt.iter.cond {
            emitExpr(e, stmt.iter.cond)
        }
        if stmt.iter.kind == token.FOR {
            e.emitToken(token.SEMICOLON)
            e.emitSpace()
            if stmt.iter.post {
                e.skipSemi = true
                emitStmt(e, stmt.iter.post)
                e.skipSemi = false
            }
        }
        e.emitToken(token.RPAREN)
        e.emitSpace()
        emitStmt(e, stmt.iter.body)
        break
    case ast.STMT_JUMP:
        e.emitToken(stmt.jump.keyword)
        if stmt.jump.label {
            e.emitSpace()
            emitExpr(e, stmt.jump.label)
        }
        e.emitToken(token.SEMICOLON)
        break
    case ast.STMT_LABEL:
        emitExpr(e, stmt.label.label)
        e.emitToken(token.COLON)
        e.emitNewline()
        e.emitTabs()
        emitStmt(e, stmt.label.stmt)
        break
    case ast.STMT_POSTFIX:
        emitExpr(e, stmt.postfix.x)
        e.emitToken(stmt.postfix.op)
        e.emitToken(token.SEMICOLON)
        break
    case ast.STMT_RETURN:
        e.emitToken(token.RETURN)
        if stmt.return_.x {
            e.emitSpace()
            emitExpr(e, stmt.return_.x)
        }
        e.emitToken(token.SEMICOLON)
        break
    case ast.STMT_SWITCH:
        e.emitToken(token.SWITCH)
        e.emitSpace()
        e.emitToken(token.LPAREN)
        emitExpr(e, stmt.switch_.tag)
        e.emitToken(token.RPAREN)
        e.emitSpace()
        e.emitToken(token.LBRACE)
        e.emitNewline()
        for var i = 0; i < len(stmt.switch_.stmts); i++ {
            e.emitTabs()
            emitStmt(e, stmt.switch_.stmts[i])
        }
        e.emitTabs()
        e.emitToken(token.RBRACE)
        break
    default:
        panic("Unknown stmt")
        break
    }
}

fun _emitFields(e *emitter.Emitter, fields []*ast.Decl) {
    for var i = 0; i < len(fields); i++ {
        let field = fields[i]
        if field.field.name || field.field.type.kind == ast.TYPE_STRUCT {
            e.emitTabs()
            emitDecl(e, field)
            e.emitToken(token.SEMICOLON)
            e.emitNewline()
        } else {
            let base = types.baseType(field.field.type)
            _emitFields(e, base.struct_.fields)
        }
    }
}

fun emitFuncType(e *emitter.Emitter, type *ast.Expr, name *ast.Expr, recv *ast.Decl) {
    if type.func.result != nil {
        emitType(e, type.func.result, name)
    } else {
        e.emitString("void")
        e.emitSpace()
        emitExpr(e, name)
    }
    e.emitToken(token.LPAREN)
    if recv != nil {
        emitDecl(e, recv)
    }
    for var i = 0; i < len(type.func.params); i++ {
        if i > 0 || recv != nil {
            e.emitToken(token.COMMA)
            e.emitSpace()
        }
        emitDecl(e, type.func.params[i])
    }
    e.emitToken(token.RPAREN)
}

fun emitType(e *emitter.Emitter, type *ast.Expr, name *ast.Expr) {
    if type == nil {
        panic("type is nil")
    }
    switch type.kind {
    case ast.EXPR_IDENT:
        emitExpr(e, type)
        break
    case ast.EXPR_SELECTOR:
        emitExpr(e, type.selector.sel) // XXX
        break
    case ast.EXPR_STAR:
        let base = type.star.x
        if base.kind == ast.TYPE_FUNC {
            emitType(e, base.func.result, nil)
            e.emitToken(token.LPAREN)
            e.emitToken(token.MUL)
            if name != nil {
                emitExpr(e, name)
            }
            e.emitToken(token.RPAREN)
            e.emitToken(token.LPAREN)
            for var i = 0; i < len(base.func.params); i++ {
                if i > 0 {
                    e.emitToken(token.COMMA)
                    e.emitSpace()
                }
                emitDecl(e, base.func.params[i])
            }
            e.emitToken(token.RPAREN)
            name = nil
        } else {
            emitType(e, base, nil)
            e.emitToken(token.MUL)
        }
        break
    case ast.TYPE_ARRAY:
        if type.array_.dynamic {
            e.emitToken(token.ARRAY)
            e.emitToken(token.LPAREN)
            emitType(e, type.array_.elt, nil)
            e.emitToken(token.RPAREN)
        } else {
            emitType(e, type.array_.elt, name)
            e.emitToken(token.LBRACK)
            if type.array_.len {
                emitExpr(e, type.array_.len)
            }
            e.emitToken(token.RBRACK)
            name = nil
        }
        break
    case ast.TYPE_ELLIPSIS:
        e.emitToken(token.ELLIPSIS)
        break
    case ast.TYPE_ENUM:
        e.emitToken(token.ENUM)
        if type.enum_.name {
            e.emitSpace()
            emitExpr(e, type.enum_.name)
        }
        if !e.forwardDecl && len(type.enum_.enums) > 0 {
            e.emitSpace()
            e.emitToken(token.LBRACE)
            e.emitNewline()
            e.indent++
            for var i = 0; i < len(type.enum_.enums); i++ {
                let decl = type.enum_.enums[i]
                e.emitTabs()
                emitExpr(e, decl.value.name)
                if decl.value.value {
                    e.emitSpace()
                    e.emitToken(token.ASSIGN)
                    e.emitSpace()
                    emitExpr(e, decl.value.value)
                }
                e.emitToken(token.COMMA)
                e.emitNewline()
            }
            e.indent--
            e.emitTabs()
            e.emitToken(token.RBRACE)
        }
        break
    case ast.TYPE_FUNC:
        emitFuncType(e, type, name, nil)
        name = nil
        break
    case ast.TYPE_MAP:
        e.emitToken(token.MAP)
        e.emitToken(token.LPAREN)
        emitExpr(e, type.map_.val)
        e.emitToken(token.RPAREN)
        break
    case ast.TYPE_STRUCT:
        e.emitToken(type.struct_.tok)
        if type.struct_.name {
            e.emitSpace()
            emitExpr(e, type.struct_.name)
        }
        if !e.forwardDecl && len(type.struct_.fields) > 0 {
            e.emitSpace()
            e.emitToken(token.LBRACE)
            e.emitNewline()
            e.indent++
            _emitFields(e, type.struct_.fields)
            e.indent--
            e.emitTabs()
            e.emitToken(token.RBRACE)
        }
        break
    default:
        panic(C.sprintf("Unknown type: %d", type.kind))
    }
    if type.isConst {
        e.emitSpace()
        e.emitToken(token.CONST)
    }
    if name {
        e.emitSpace()
        emitExpr(e, name)
    }
}

fun emitDecl(e *emitter.Emitter, decl *ast.Decl) {
    switch decl.kind {
    case ast.DECL_FIELD:
        emitType(e, decl.field.type, decl.field.name)
        break
    case ast.DECL_FUNC:
        emitFuncType(e, decl.func.type, decl.func.name, decl.func.recv)
        if !e.forwardDecl && decl.func.body {
            e.emitSpace()
            emitStmt(e, decl.func.body)
        } else {
            e.emitToken(token.SEMICOLON)
        }
        break
    case ast.DECL_PRAGMA:
        e.emitString("//")
        e.emitToken(token.HASH)
        e.emitString(decl.pragma.lit)
        break
    case ast.DECL_TYPE:
        e.emitToken(token.TYPEDEF)
        e.emitSpace()
        emitType(e, decl.type.type, decl.type.name)
        e.emitToken(token.SEMICOLON)
        break
    case ast.DECL_VALUE:
        if e.forwardDecl {
            var isPublic = true
            switch decl.value.type.kind {
            case ast.TYPE_ARRAY:
                isPublic = decl.value.type.array_.dynamic
                break
            case ast.TYPE_STRUCT:
                isPublic = false
                break
            default:
                break
            }
            if !isPublic {
                break
            }
        }
        if e.forwardDecl && decl.value.value {
            e.emitToken(token.EXTERN)
            e.emitSpace()
        }
        emitType(e, decl.value.type, decl.value.name)
        if !e.forwardDecl && decl.value.value {
            e.emitSpace()
            e.emitToken(token.ASSIGN)
            e.emitSpace()
            emitExpr(e, decl.value.value)
        }
        e.emitToken(token.SEMICOLON)
        break
    default:
        panic("Unknown decl")
        break
    }
}

fun emitFile(e *emitter.Emitter, file *ast.File) {
    e.emitString("//")
    e.emitString(file.filename)
    e.emitNewline()
    e.emitNewline()
    if file.name != nil {
        e.emitToken(token.PACKAGE)
        e.emitToken(token.LPAREN)
        emitExpr(e, file.name)
        e.emitToken(token.RPAREN)
        e.emitToken(token.SEMICOLON)
        e.emitNewline()
    }
    for var i = 0; len(file.decls); i++ {
        e.emitNewline()
        emitDecl(e, file.decls[i])
        e.emitNewline()
    }
}

fun emitObjects(e *emitter.Emitter, scope *ast.Scope, kind ast.ObjKind) {
    for var i = 0; i < len(scope.keys); i++ {
        let obj = scope.objects[scope.keys[i]]
        if obj.kind == kind {
            e.emitNewline()
            emitDecl(e, obj.decl)
            e.emitNewline()
        }
        if kind == ast.ObjKind_FUN && obj.kind == ast.ObjKind_TYP {
            if let scope *ast.Scope = obj.data; scope {
                emitObjects(e, scope, kind)
            }
        }
    }
}

fun emitScope(e *emitter.Emitter, scope *ast.Scope) {
    emitObjects(e, scope, ast.ObjKind_TYP)
    emitObjects(e, scope, ast.ObjKind_VAL)
    emitObjects(e, scope, ast.ObjKind_FUN)
}

fun _emitPackage(e *emitter.Emitter, done *map string, pkg *types.Package) {
    if (*done)[pkg.path] != nil {
        return
    }
    (*done)[pkg.path] = pkg.path
    for var i = 0; i < len(pkg.imports); i++ {
        _emitPackage(e, done, pkg.imports[i])
    }
    e.forwardDecl = true
    emitScope(e, pkg.scope)
    e.forwardDecl = false
    emitScope(e, pkg.scope)
}

fun emitPackage(e *emitter.Emitter, pkg *types.Package) {
    let done = makemap(string)
    _emitPackage(e, &done, pkg)
    delete(done)
}

fun emitHeader(e *emitter.Emitter, pkg *types.Package) {
    let old = e.forwardDecl
    e.forwardDecl = true
    emitObjects(e, pkg.scope, ast.ObjKind_TYP)
    e.forwardDecl = false
    emitObjects(e, pkg.scope, ast.ObjKind_TYP)
    e.forwardDecl = true
    emitObjects(e, pkg.scope, ast.ObjKind_VAL)
    emitObjects(e, pkg.scope, ast.ObjKind_FUN)
    e.forwardDecl = old
}

fun emitBody(e *emitter.Emitter, pkg *types.Package) {
    let old = e.forwardDecl
    e.forwardDecl = false
    emitObjects(e, pkg.scope, ast.ObjKind_VAL)
    emitObjects(e, pkg.scope, ast.ObjKind_FUN)
    e.forwardDecl = old
}
