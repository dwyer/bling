* main:
    * change `main` function signature to `fun()`, use `os.args` to get the args
      and `os.exit()` to return.
        * Allow other packages to access global args.
* Packages:
    * Remove `package` keyword, use filename for package names instead.
    * Allow single files to have their own scope
    * Assert that file packages in the same directory import one another.
        * Possibly allow file packages in same directory to import each other
          mutually.
* Implement optional types, e.g.
    * Old: expr.ident.obj && expr.ident.obj.scope && expr.ident.obj.scope.pkgName
    * New: expr.ident.obj?.scope?.pkgName
    * `x?.sel` => `x ? x.sel : nil`
    * assert that both sizes resolve to pointers
    * a?.b          a ? a.b : 0
      a?.b?.c       a && a.b ? a.b.c : 0
      a?.b.c        a ? a.b.c : 0
      a.b?.c        a.b ? a.b.c : 0
      a?.b.c?.d     a && a.b.c ? a.b.c.d : 0
* var args
    * Implement var args.
    * Rewrite `print` to accept var args.
* Implicit nil: var decls without assignment are nil by default
* cmd/blingc: Add `run` option.
* arrays:
    * allow slices. e.g. `a[i:j]`
* maps:
    * Add a `haskey` func.
    * Throw error when getting a missing key.
* strings: Replace C strings with Bling strings
    * create a builtin to replace `strdup`.
    * stop converting `string` to `*char` automatically (this will make it
      easier to change `string` to a struct later).
* Slice:
    * allow native arrays (and nil) to be assigned to Slice
    * Change name to Array or similar
* Make `void` a keyword?
* switch: allow init expr
* Change cast syntax from `typ T(x)` to `T(x)`
* Remove '#' token from bling.
* var, let, and const
    * var: typical variable
    * let: "const" variable, must be assigned exactly once, has memory address
    * const: must be assigned once, has no memory address (like `enum` value or
      #define)
* Implement `import ( ... )` decl.
* Make semicolons optional before `}` and `)'.
* ast: Replace CastExpr with CallExpr.
* swtich/case: Implicit break.
