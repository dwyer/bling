Allow types where exprs are expected, for instance:
    - make(T)
    - var y T = T{...}
    - var x []T = []T{...}
    - etc.

Implement a way to define a value with no address, such as #define and C's enum.

Allow extending structs:

    typedef vec2 struct {
        x int;
        y int;
    };

    typedef vec3 struct {
        vec2;
        z int;
    }

Eventually we want to have switch cases to have an implicit break and to open a
new scope by default. So the above example would be converted to:

    // in bling
    switch (x) {
    case A, B, C:
        var y = x + 1;
        doSomething(y);
    default:
        doSomethingElse();
    }

    // in C
    switch (x) {
    case A:
    case B:
    case C: {
            int y = x + 1;
            doSomething(y);
        }
        break;
    default: {
            doSomethingElse();
        }
        break;
    }

Compile to assembly.
