package sys

import "C"
import "runtime"

typ Size u64

fun errno() int {
    return C.getErrno()
}

fun getenv(key string) string {
    return C.getenv(key)
}

fun _throwErrno(e **runtime.Error) {
    var errno = C.getErrno()
    if errno != 0 {
        var err = runtime.NewError(C.strerror(errno))
        runtime.Error_move(err, e)
    }
}

fun open(filename string, oflag int, perm int, e **runtime.Error) int {
    var fd = C.open(filename, oflag, perm)
    if fd < 0 {
        _throwErrno(e)
    }
    return fd
}

fun close(fd int, e **runtime.Error) {
    if C.close(fd) < 0 {
        _throwErrno(e)
    }
}

fun read(fd int, b []char, e **runtime.Error) int {
    var n = len(b)
    if n == 0 {
        return 0
    }
    var buf = (typ *runtime.Slice(&b))._array
    var r = C.read(fd, buf, n)
    if r < 0 {
        _throwErrno(e)
    }
    return r
}

fun write(fd int, b []char, e **runtime.Error) int {
    var r = C.write(fd, &b[0], len(b))
    if r < 0 {
        _throwErrno(e)
    }
    return r
}

typ FileOpenMode enum {
    O_RDONLY = 0x0000
    O_WRONLY = 0x0001
    O_RDWR = 0x0002
    O_APPEND = 0x0008
    O_CREAT = 0x0200
    O_TRUNC = 0x0400
    O_EXCL = 0x0800
}

typ FileNo enum {
    STDIN_FILENO = 0
    STDOUT_FILENO = 1
    STDERR_FILENO = 2
}

typ Errno enum {
    E2BIG = 0x7
    EACCES = 0xd
    EADDRINUSE = 0x62
    EADDRNOTAVAIL = 0x63
    EADV = 0x44
    EAFNOSUPPORT = 0x61
    EAGAIN = 0xb
    EALREADY = 0x72
    EBADE = 0x34
    EBADF = 0x9
    EBADFD = 0x4d
    EBADMSG = 0x4a
    EBADR = 0x35
    EBADRQC = 0x38
    EBADSLT = 0x39
    EBFONT = 0x3b
    EBUSY = 0x10
    ECANCELED = 0x7d
    ECHILD = 0xa
    ECHRNG = 0x2c
    ECOMM = 0x46
    ECONNABORTED = 0x67
    ECONNREFUSED = 0x6f
    ECONNRESET = 0x68
    EDEADLK = 0x23
    EDEADLOCK = 0x23
    EDESTADDRREQ = 0x59
    EDOM = 0x21
    EDOTDOT = 0x49
    EDQUOT = 0x7a
    EEXIST = 0x11
    EFAULT = 0xe
    EFBIG = 0x1b
    EHOSTDOWN = 0x70
    EHOSTUNREACH = 0x71
    EIDRM = 0x2b
    EILSEQ = 0x54
    EINPROGRESS = 0x73
    EINTR = 0x4
    EINVAL = 0x16
    EIO = 0x5
    EISCONN = 0x6a
    EISDIR = 0x15
    EISNAM = 0x78
    EKEYEXPIRED = 0x7f
    EKEYREJECTED = 0x81
    EKEYREVOKED = 0x80
    EL2HLT = 0x33
    EL2NSYNC = 0x2d
    EL3HLT = 0x2e
    EL3RST = 0x2f
    ELIBACC = 0x4f
    ELIBBAD = 0x50
    ELIBEXEC = 0x53
    ELIBMAX = 0x52
    ELIBSCN = 0x51
    ELNRNG = 0x30
    ELOOP = 0x28
    EMEDIUMTYPE = 0x7c
    EMFILE = 0x18
    EMLINK = 0x1f
    EMSGSIZE = 0x5a
    EMULTIHOP = 0x48
    ENAMETOOLONG = 0x24
    ENAVAIL = 0x77
    ENETDOWN = 0x64
    ENETRESET = 0x66
    ENETUNREACH = 0x65
    ENFILE = 0x17
    ENOANO = 0x37
    ENOBUFS = 0x69
    ENOCSI = 0x32
    ENODATA = 0x3d
    ENODEV = 0x13
    ENOENT = 0x2
    ENOEXEC = 0x8
    ENOKEY = 0x7e
    ENOLCK = 0x25
    ENOLINK = 0x43
    ENOMEDIUM = 0x7b
    ENOMEM = 0xc
    ENOMSG = 0x2a
    ENONET = 0x40
    ENOPKG = 0x41
    ENOPROTOOPT = 0x5c
    ENOSPC = 0x1c
    ENOSR = 0x3f
    ENOSTR = 0x3c
    ENOSYS = 0x26
    ENOTBLK = 0xf
    ENOTCONN = 0x6b
    ENOTDIR = 0x14
    ENOTEMPTY = 0x27
    ENOTNAM = 0x76
    ENOTRECOVERABLE = 0x83
    ENOTSOCK = 0x58
    ENOTSUP = 0x5f
    ENOTTY = 0x19
    ENOTUNIQ = 0x4c
    ENXIO = 0x6
    EOPNOTSUPP = 0x5f
    EOVERFLOW = 0x4b
    EOWNERDEAD = 0x82
    EPERM = 0x1
    EPFNOSUPPORT = 0x60
    EPIPE = 0x20
    EPROTO = 0x47
    EPROTONOSUPPORT = 0x5d
    EPROTOTYPE = 0x5b
    ERANGE = 0x22
    EREMCHG = 0x4e
    EREMOTE = 0x42
    EREMOTEIO = 0x79
    ERESTART = 0x55
    ERFKILL = 0x84
    EROFS = 0x1e
    ESHUTDOWN = 0x6c
    ESOCKTNOSUPPORT = 0x5e
    ESPIPE = 0x1d
    ESRCH = 0x3
    ESRMNT = 0x45
    ESTALE = 0x74
    ESTRPIPE = 0x56
    ETIME = 0x3e
    ETIMEDOUT = 0x6e
    ETOOMANYREFS = 0x6d
    ETXTBSY = 0x1a
    EUCLEAN = 0x75
    EUNATCH = 0x31
    EUSERS = 0x57
    EWOULDBLOCK = 0xb
    EXDEV = 0x12
    EXFULL = 0x36
}

typ Dir voidptr

fun opendir(filename string, e **runtime.Error) Dir {
    var d = C.opendir(filename)
    if d == nil {
        _throwErrno(e)
    }
    return d
}

fun closedir(dir Dir, e **runtime.Error) {
    if C.closedir(dir) != 0 {
        _throwErrno(e)
    }
}

typ Dirent voidptr

fun readdir(dir Dir, e **runtime.Error) Dirent {
    C.setErrno(0)
    var dirent = C.readdir(dir)
    if C.getErrno() != 0 {
        _throwErrno(e)
    }
    return dirent
}

fun (dirent Dirent) name() string {
    return C.Dirent_name(dirent)
}

typ Stat C.Stat

fun stat(path string, s *Stat, e **runtime.Error) {
    if C.stat(path, s) != 0 {
        _throwErrno(e)
    }
}

typ S enum {
    S_IXOTH = 0001
    S_IWOTH = 0002
    S_IROTH = 0004
    S_IXGRP = 0010
    S_IWGRP = 0020
    S_IRGRP = 0040
    S_IXUSR = 0100
    S_IWUSR = 0200
    S_IRUSR = 0400
    S_IRWXO = S_IXOTH | S_IWOTH | S_IROTH
    S_IRWXG = S_IXGRP | S_IWGRP | S_IRGRP
    S_IRWXU = S_IXUSR | S_IWUSR | S_IRUSR
    S_BLKSIZE = 0x200
    S_IEXEC = 0x40
    S_IWRITE = 0x80
    S_IREAD = 0x100
    S_ISVTX = 0x200
    S_ISGID = 0x400
    S_ISUID = 0x800
    S_IFIFO = 0x1000
    S_IFCHR = 0x2000
    S_IFDIR = 0x4000
    S_IFBLK = 0x6000
    S_IFREG = 0x8000
    S_IFLNK = 0xa000
    S_IFSOCK = 0xc000
    S_IFMT = 0xf000
}

fun mkdir(path string, mode u32, e **runtime.Error) {
    if C.mkdir(path, mode) != 0 {
        _throwErrno(e)
    }
}

fun environ() *charptr {
    return C.getEnviron()
}

typ Pid int

fun exec(path string, argv [?]const charptr, envv [?]const charptr, e **runtime.Error) {
    if C.execve(path, argv, envv) == -1 {
        _throwErrno(e)
    }
}

fun fork(e **runtime.Error) Pid {
    var pid = C.fork()
    if pid == -1 {
        _throwErrno(e)
    }
    return pid
}

fun waitpid(pid Pid, status *int, opts int, e **runtime.Error) Pid {
    var wpid = C.waitpid(pid, status, opts)
    if wpid == -1 {
        _throwErrno(e)
    }
    return wpid
}
