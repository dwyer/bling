package runtime

import "C"

typ Size C.size_t

fun _panic(s *const char) {
    print(s)
    var buf [1024]*void
    var n = C.backtrace(buf, 1024)
    C.backtrace_symbols_fd(buf, n, 2)
    C.exit(1)
}

fun _print(s *const char) {
    C.printf("%s\n", s);
}

fun malloc(n Size) *void {
    return C.malloc(n)
}

fun free(ptr *void) {
    C.free(ptr)
}

fun memcpy(dst *void, src *const void, n Size) *void {
    return C.memcpy(dst, src, n)
}

fun memcmp(dst *const void, src *const void, n Size) int {
    return C.memcmp(dst, src, n)
}

fun memset(dst *void, c int, n Size) *void {
    return C.memset(dst, c, n)
}

fun strdup(s *const char) *char {
    return C.strdup(s)
}

fun strndup(s *const char, n Size) *char {
    return C.strndup(s, n)
}

fun strlen(s *const char) Size {
    return C.strlen(s)
}

fun streq(a *const char, b *const char) bool {
    return C.strcmp(a, b) == 0
}

typ Error struct {
    error *char
}

typ Slice struct {
    size int
    _len int
    cap int
    _array *void
}

typ MapPair struct {
    key *void
    val *void
}

typ Map struct {
    _valSize int
    _len int
    _pairs [array]MapPair
}

typ MapStats struct {
    hits int
    misses int
    lookups int
    iters int
}

typ MapIter struct {
    _map *const Map
    _idx int
}

fun NewError(msg *const char) *Error {
    var err Error = {
        error: C.strdup(msg),
    }
    return &&err
}

fun Error_move(src *Error, dst **Error) {
    if dst != nil {
        *dst = src
    } else {
        panic(C.sprintf("Unhandled error: %s", src.error))
    }
}

fun Error_check(e **Error) {
    if C.getErrno() {
        var err *Error = NewError(C.strerror(C.getErrno()))
        Error_move(err, e)
    }
}

fun clearError() {
    C.setErrno(0)
}

fun Error_free(e *Error) {
    free(e.error)
    free(e)
}

fun Slice_make(size int) Slice {
    var s Slice = {
        size: size,
        _len: 0,
        cap: 0,
        _array: nil,
    }
    return s
}

fun Slice_unmake(s *void) {
    free((typ *Slice(s))._array)
}

fun Slice_len(s *const void) int {
    return (typ *Slice(s))._len
}

fun Slice_cap(s *const void) int {
    return (typ *Slice(s)).cap
}

fun Slice_get0(s *const void, size int, i int, dst *void) *void {
    if i >= (typ *Slice(s))._len {
        panic(C.sprintf("out of range: index=%d, len=%d", i, (typ *Slice(s))._len))
    }
    var ref *char = &(typ *char((typ *Slice(s))._array))[i * size]
    if dst {
        if size == 1 {
            *typ *char(dst) = *ref
        } else {
            memcpy(dst, ref, size)
        }
    }
    return ref
}


fun Slice_get(s *const void, i int, dst *void) *void {
    return Slice_get0(s, (typ *Slice(s)).size, i, dst)
}

fun _setCap(s *Slice, size int, cap int) {
    s.cap = cap
    s._array = C.realloc(s._array, s.cap * size)
}

fun _setLen(s *Slice, size int, len int) {
    var grow = false
    var cap = s.cap
    if cap == 0 {
        cap = 1
        grow = true
    }
    while cap < len {
        cap *= 2
        grow = true
    }
    if s._array == nil || grow {
        _setCap(s, size, cap)
    }
    s._len = len
}

fun Slice_setLen0(s *void, size int, len int) {
    var old = (typ *Slice(s))._len
    _setLen(s, size, len)
    var diff = len - old
    if diff > 0 {
        C.memset(Slice_get0(s, size, old, nil), 0, diff * size)
    }
}

fun Slice_setLen(s *void, len int) {
    Slice_setLen0(s, (typ *Slice(s)).size, len)
}

fun Slice_set0(s *void, size int, i int, x *const void) {
    if size == 1 {
        (typ *char((typ *Slice(s))._array))[i] = *typ *char(x)
    } else {
        memcpy(Slice_get0(s, size, i, nil), x, size)
    }
}

fun Slice_set(s *void, i int, x *const void) {
    Slice_set0(s, (typ *Slice(s)).size, i, x)
}

fun Slice_append(s *void, x *const void) {
    var size = (typ *Slice(s)).size
    _setLen(s, size, (typ *Slice(s))._len + 1)
    Slice_set(s, (typ *Slice(s))._len - 1, x)
}

fun nilArray(s *void) *void {
    var z = nil
    Slice_append(s, &z)
    return (typ *Slice(s))._array
}

var MAP_LOAD_FACTOR const float = 0.65

var DEFAULT_CAP const int = 8

var stats MapStats = {}

fun djb2(s *const char) uintptr {
    var hash uintptr = 5381
    var ch int = *s
    while ch {
        hash = ((hash << 5) + hash) + ch
        s++
        ch = *s
    }
    return hash
}

fun memdup(src *const void, size Size) *void {
    return memcpy(malloc(size), src, size)
}

fun Map_init(m *Map) {
    assert(m._valSize)
    m._pairs = makearray(MapPair)
    Slice_setLen0(&m._pairs, sizeof(MapPair), DEFAULT_CAP)
}

fun Map_make(valSize int) Map {
    var m Map = {
        _valSize: valSize,
    }
    Map_init(&m)
    return m
}

fun Map_unmake(m *void) {
    Slice_unmake(&(typ *Map(m))._pairs)
}

fun Map_len(m *const void) int {
    return (typ *Map(m))._len
}

fun Map_cap(m *const void) int {
    return len((typ *Map(m))._pairs)
}

fun Map_isInitialized(m *const Map) bool {
    return Map_cap(m) > 0
}

fun pair_ref(m *const Map, key *const void) *MapPair {
    var hash = djb2(key) % Map_cap(m)
    stats.lookups++
    for var i = 0; i < len(m._pairs); i++ {
        stats.iters++
        var idx = (hash + i) % Map_cap(m)
        var p = &m._pairs[idx]
        if !p.key || streq(key, p.key) {
            if !i {
                stats.hits++
            } else {
                stats.misses++
            }
            return p
        }
    }
    return nil
}

fun set_unsafe(m *Map, key *const char, val *const void) {
    if !Map_isInitialized(m) {
        Map_init(m)
    }
    var p = pair_ref(m, key)
    if p.key == nil {
        p.key = C.strdup(key)
        p.val = memdup(val, m._valSize)
        m._len++
    } else {
        memcpy(p.val, val, m._valSize)
    }
}

fun Map_get(m *const void, key *const char, val *void) bool {
    if Map_isInitialized(m) {
        var p = pair_ref(m, key)
        if p.val {
            if val {
                memcpy(val, p.val, (typ *Map(m))._valSize)
            }
            return true
        }
    }
    return false
}

fun Map_set(m *void, key *const char, val *const void) {
    set_unsafe(m, key, val)
    var load_factor = typ float(Map_len(m)) / Map_cap(m)
    if load_factor >= MAP_LOAD_FACTOR {
        var newCap = Map_cap(m) * 2
        var pairs = (typ *Map(m))._pairs
        (typ *Map(m))._pairs = makearray(MapPair)
        Slice_setLen0(&(typ *Map(m))._pairs, sizeof(MapPair), newCap)
        (typ *Map(m))._len = 0
        for var i = 0; i < len(pairs); i++ {
            var p = &pairs[i]
            if p.key {
                set_unsafe((typ *Map(m)), p.key, p.val)
            }
        }
        Slice_unmake(&pairs)
    }
}

fun NewMapIter(m *const void) MapIter {
    var iter MapIter = {
        _map: m,
    }
    return iter
}

fun MapIter_next(m *MapIter, key **char, val *void) int {
    while m._idx < len(m._map._pairs) {
        var p = &m._map._pairs[m._idx]
        m._idx++
        if p.key {
            if key {
                *typ **void(key) = p.key
            }
            if val {
                memcpy(val, p.val, m._map._valSize)
            }
            return 1
        }
    }
    return 0
}
