package runtime

import "C"

typ Size C.size_t

fun _panic(s charstr) {
    print(s)
    var buf [1024]voidptr
    var n = C.backtrace(buf, 1024)
    C.backtrace_symbols_fd(buf, n, 2)
    C.exit(1)
}

fun _print(s charstr) {
    C.printf("%s\n", s);
}

fun malloc(n Size) voidptr {
    return C.malloc(n)
}

fun free(ptr voidptr) {
    C.free(ptr)
}

fun memcpy(dst voidptr, src *const void, n Size) voidptr {
    return C.memcpy(dst, src, n)
}

fun memdup(src *const void, size Size) voidptr {
    return memcpy(malloc(size), src, size)
}

fun strdup(s charstr) charptr {
    return C.strdup(s)
}

fun strndup(s charstr, n Size) charptr {
    return C.strndup(s, n)
}

fun strlen(s charstr) Size {
    return C.strlen(s)
}

fun streq(a charstr, b charstr) bool {
    return C.strcmp(a, b) == 0
}

fun bytetocharptr(b []char) charptr {
    return nilArray(typ *Slice(&b), 1)
}

fun charstobytes(s charstr) []char { // TODO DELETE THIS
    var n = len(s)
    var buf = Slice{
        _len: n,
        _cap: n,
        _array: memdup(s, n),
    }
    return typ []char(buf)
}

fun makebuf(n int) []char {
    var buf = Slice{
        _len: n,
        _cap: n,
        _array: malloc(n),
    }
    return typ []char(buf)
}
