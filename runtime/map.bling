package runtime

var MAP_LOAD_FACTOR const float = 0.65
var DEFAULT_CAP const int = 8

typ MapStats struct {
    hits int
    misses int
    lookups int
    iters int
}

var stats MapStats = {}

typ MapPair struct {
    key voidptr
    val voidptr
}

typ Map struct {
    _valSize int
    _len int
    _pairs []MapPair
}

fun djb2(s charstr) uintptr {
    var hash uintptr = 5381
    var ch int = *s
    while ch {
        hash = ((hash << 5) + hash) + ch
        s++
        ch = *s
    }
    return hash
}

fun Map_init(m *Map) {
    assert(m._valSize)
    m._pairs = []MapPair{}
    Array_setLen(typ *Slice(&m._pairs), sizeof(MapPair), DEFAULT_CAP)
}

fun Map_make(valSize int) Map {
    var m Map = {
        _valSize: valSize,
    }
    Map_init(&m)
    return m
}

fun Map_unmake(m *Map) {
    delete(m._pairs)
}

fun Map_len(m *const Map) int {
    return m._len
}

fun _mapCap(m *const Map) int {
    return len(m._pairs)
}

fun _mapIsInitialized(m *const Map) bool {
    return _mapCap(m) > 0
}

fun _mapGetPairIdx(m *const Map, key *const void) int {
    var hash = djb2(key) % _mapCap(m)
    stats.lookups++
    for var i = 0; i < len(m._pairs); i++ {
        stats.iters++
        var idx = (hash + i) % _mapCap(m)
        if var p = &m._pairs[idx]; !p.key || streq(key, p.key) {
            if !i {
                stats.hits++
            } else {
                stats.misses++
            }
            return idx
        }
    }
    return -1
}

fun _mapGetPairRef(m *const Map, key *const void) *MapPair {
    if var idx = _mapGetPairIdx(m, key); idx >= 0 {
        return &m._pairs[idx]
    }
    return nil
}

fun _mapSetUnsafe(m *Map, key charstr, val *const void) {
    if !_mapIsInitialized(m) {
        Map_init(m)
    }
    if var p = _mapGetPairRef(m, key); p.key == nil {
        p.key = strdup(key)
        p.val = memdup(val, m._valSize)
        m._len++
    } else {
        memcpy(p.val, val, m._valSize)
    }
}

fun Map_get(m *const Map, key charstr, val voidptr) bool {
    if _mapIsInitialized(m) {
        if var p = _mapGetPairRef(m, key); p.val != nil {
            if val {
                memcpy(val, p.val, m._valSize)
            }
            return true
        }
    }
    return false
}

fun Map_set(m *Map, key charstr, val *const void) {
    _mapSetUnsafe(m, key, val)
    if var load_factor = typ float(Map_len(m)) / _mapCap(m); load_factor >= MAP_LOAD_FACTOR {
        var newCap = _mapCap(m) * 2
        var pairs = m._pairs
        m._pairs = []MapPair{}
        Array_setLen(typ *Slice(&m._pairs), sizeof(MapPair), newCap)
        m._len = 0
        for var i = 0; i < len(pairs); i++ {
            if var p = &pairs[i]; p.key {
                _mapSetUnsafe(m, p.key, p.val)
            }
        }
        delete(pairs)
    }
}

fun Map_remove(m *Map, key charstr) bool {
    if _mapIsInitialized(m) {
        if var idx = _mapGetPairIdx(m, key); idx >= 0 {
            m._pairs[idx] = MapPair{}
            return true
        }
    }
    return false
}

typ MapIter struct {
    _map *const Map
    _idx int
}

fun NewMapIter(m *const Map) MapIter {
    var iter MapIter = {
        _map: m,
    }
    return iter
}

fun MapIter_next(m *MapIter, key *charptr, val voidptr) int {
    while m._idx < len(m._map._pairs) {
        var p = &m._map._pairs[m._idx]
        m._idx++
        if p.key {
            if key {
                *typ *voidptr(key) = p.key
            }
            if val {
                memcpy(val, p.val, m._map._valSize)
            }
            return 1
        }
    }
    return 0
}
