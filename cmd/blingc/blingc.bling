package main
import "bling/ast"
import "bling/emitter"
import "bling/parser"
import "bling/token"
import "bling/types"
import "bytes"
import "io/ioutil"
import "os"
import "paths"
import "subc/cemitter"
import "subc/cparser"
import "sys"
import "utils"

#include "bling/parser/parser.h"

#include "bling/types/types.h"

#include "os/os.h"

#include "paths/paths.h"

#include "subc/cemitter/cemitter.h"

#include "subc/cparser/cparser.h"

#include "sys/sys.h"

fun usage(progname *const char) {
    panic("usage: %s -o DST SRCS", progname)
}

fun emit_rawfile(e *emitter.Emitter, filename *const char) {
    var err *utils.Error = NULL
    var src *char = ioutil.readFile(filename, &err)
    if err {
        panic(err.error)
    }
    emitter.emitString(e, src)
    free(src)
}

fun compile_c(argv []*char) {
    var dst *const char = NULL
    while **argv == '-' {
        if streq(*argv, "-o") {
            argv++
            dst = *argv
        } else {
            panic("unknown option: %s", *argv)
        }
        argv++
    }
    var e emitter.Emitter = {}
    var fset *token.FileSet = token.newFileSet()
    while *argv {
        var filename *char = *argv
        var file *ast.File = cparser.parseFile(fset, filename, types.universe())
        emitter.emitFile(&e, file)
        argv++
    }
    var out *char = emitter.Emitter_string(&e)
    var file *os.File = os.stdout
    var err *utils.Error = NULL
    if dst {
        file = os.create(dst, &err)
        if err {
            panic(err.error)
        }
    }
    os.write(file, out, &err)
    if err {
        panic(err.error)
    }
    if dst {
        os.close(file, &err)
        if err {
            panic(err.error)
        }
    }
}

fun compile_bling(argv []*char) {
    var emit_as_bling bool = false
    var conf types.Config = {
        strict: true,
    }
    var dst *char = NULL
    while **argv == '-' {
        if streq(*argv, "-o") {
            argv++
            dst = *argv
        } else {
            panic("unknown option: %s", *argv)
        }
        argv++
    }
    if dst {
        emit_as_bling = bytes.hasSuffix(dst, ".bling")
    }
    var e emitter.Emitter = {}
    var err *utils.Error = NULL
    if !emit_as_bling {
        emit_rawfile(&e, "bootstrap/bootstrap.h")
    }
    var fset *token.FileSet = token.newFileSet()
    while *argv {
        var filename *char = *argv
        var file *ast.File = NULL
        if bytes.hasSuffix(filename, ".bling") {
            file = parser.parseFile(fset, filename)
        } else if bytes.hasSuffix(filename, ".c") {
            file = cparser.parseFile(fset, filename, types.universe())
        } else {
            panic("unknown file type: %s", filename)
        }
        var pkg ast.Package = types.checkFile(&conf, fset, file)
        for var i int = 0; pkg.files[i]; i++ {
            var file *ast.File = pkg.files[i]
            if emit_as_bling {
                emitter.emitFile(&e, file)
            } else {
                cemitter.emitFile(&e, file)
            }
            free(file.decls)
            free(file)
        }
        argv++
    }
    var out *char = emitter.Emitter_string(&e)
    if dst {
        if bytes.hasSuffix(dst, ".out") {
            var tmp *char = paths.join2(os.tempDir(), "tmp.c")
            ioutil.writeFile(tmp, out, 0644, NULL)
            var args []*char = {
                "/usr/bin/cc",
                "-o",
                dst,
                tmp,
                "bazel-bin/bootstrap/libbootstrap.a",
                "bazel-bin/os/libos.a",
                "bazel-bin/sys/libsys.a",
                NULL,
            }
            var code int = sys.execve(args[0], args, NULL)
            if code {
                var s *char = sys.sprintf("%s exited with code: %d", argv[0], code)
                print(s)
                free(s)
            }
        } else {
            ioutil.writeFile(dst, out, 0644, NULL)
        }
    } else {
        os.write(os.stdout, out, &err)
    }
}

fun main(argc int, argv []*char) int {
    var progname *char = *argv
    argv++
    if !*argv {
        usage(progname)
    }
    if streq(*argv, "-c") {
        argv++
        compile_c(argv)
    } else {
        compile_bling(argv)
    }
    return 0
}
